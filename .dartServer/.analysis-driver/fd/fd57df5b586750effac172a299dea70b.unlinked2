Ä»DATA_VERSIONallowedNumberOfContextsToWrite
_scheduler_logger_resourceProvider
_byteStore_infoDeclarationStore_externalSummaries_fileContentCache_unlinkedUnitStore_fileContentStrategy_analysisOptions	_packages_sourceFactorymacroKernelBuildermacroExecutor
ownedFilesdeclaredVariablesanalysisContext_saltForUnlinked_saltForElements_saltForResolution_priorityFiles_pendingFileChanges_accumulatedAffected_pendingFileChangesCompleters_requestedFiles_requestedLibraries_resolveForCompletionRequests_discoverAvailableFilesTask_definingClassMemberNameTasks_referencingNameTasks_errorsRequestedFiles_indexRequestedFiles_unitElementRequestedFiles_disposeRequests_resultController
_onResults_lastProducedSignatures_priorityResults_resolvedLibraryCache_exceptionController_searchtestViewfeatureSetProvider_fsState_fileTrackerenableIndex_libraryContext_hasDartCoreDiscovered_hasLibrariesDiscoveredtestingData	_disposed
addedFilesanalysisOptionscurrentSession
exceptionsfsStatehasFilesToAnalyzehasPendingFileChanges
knownFileslibraryContextnamenumberOfFilesToAnalyzepriorityFilesresourceProviderresultssearchsourceFactoryworkPriorityaddFileapplyPendingFileChangesbuildPackageBundle
changeFileclearLibraryContextdiscoverAvailableFilesdispose2getCachedResult	getErrorsgetFilesDefiningClassMemberNamegetFilesReferencingNamegetFileSyncgetIndexgetLibraryByUrigetParsedLibrarygetParsedLibraryByUrigetResolvedLibrarygetResolvedLibraryByUri	getResultgetUnitElementparseFileSyncperformWork
removeFileresolveForCompletion _addDeclaredVariablesToSignature_applyPendingFileChanges"_clearLibraryContextAfterException_computeAnalysisResult_computeErrors_computeIndex_computeResolvedLibrary_computeUnitElement_createErrorsResultImpl_createFileTracker_createResolvedUnitImpl_discoverAvailableFiles_discoverDartCore_discoverLibraries	_fillSalt_fillSaltForElements_fillSaltForResolution_fillSaltForUnlinked_getAnalysisResultFromBytes_getErrorsFromSerialized_getResolvedUnitKey_getResolvedUnitSignature_hasLibraryByUri_isAbsolutePath_isLibraryWithPriorityFile_maybeDispose_newMissingDartLibraryResult
_onNewFile#_removePotentiallyAffectedLibraries_reportException_resolveForCompletion_storeExceptionContext_throwIfNotAbsolutePath_updateHasErrorOrWarningFlagnothinggeneralgeneralWithErrorsgeneralImportChangedgeneralChangedchangedFilespriorityinteractive
completion_MS_BEFORE_PUMPING_EVENT_QUEUE_NUMBER_OF_EVENT_QUEUE_PUMPINGSdriverWatcher_drivers_hasWork_statusSupport_startedoutOfBandWorkerisAnalyzingstatus_hasFilesToAnalyzeaddnotifyremovestart-transitionToAnalyzingToIdleIfNoFilesToAnalyzewaitForIdle_run_pumpEventQueue
fileSystemdrivernumOfAnalyzedLibrariesfileTrackerloadedLibraryUriSetpriorityResults
_signatureisUnchangedErrorserrorsResult
unitResult_indexaddedDriverremovedDriverdecodeencode_lintCodeByUniqueNamefilePathfileContentMap	exception
contextKeyaddAddedaddKnown_MS_WORK_INTERVAL	completerfolderIteratorfiles	fileIndexisCompletedperform_appendFilesRecursively
stackTracetoStringpathkindchangedefiningFilescheckedFilesfilesToCheck_WORK_FILES	fileStampfilesToCheckIndexreferencingFilesoffsetperformanceAnalysisDriverAnalysisDriverGenericAnalysisDriverPriorityAnalysisDriverSchedulerAnalysisDriverTestViewAnalysisResultDriverWatcherErrorEncodingExceptionResult
OwnedFilesSchedulerWorker_DiscoverAvailableFilesTask_ExceptionState_FileChange_FileChangeKind!_FilesDefiningClassMemberNameTask_FilesReferencingNameTask_ResolveForCompletionRequestÅüAnalysisContextAnalysisEngineAnalysisOptionsAnalysisOptionsImplintPerformanceLogResourceProvider	ByteStoreInfoDeclarationStoreSummaryDataStoreContentCacheFileContentCacheUnlinkedUnitStoreStoredFileContentStrategyPackagesSourceFactoryMacroKernelBuilderMultiMacroExecutorDeclaredVariablesDriverBasedAnalysisContext
Uint32ListStringList_applyFileChangesSynchronouslySet	CompleterSomeResolvedUnitResultLibraryFileKindSomeResolvedLibraryResultSomeErrorsResultAnalysisDriverUnitIndexSomeUnitElementResultvoidStreamControllerObjectStreamMapResolvedUnitResultResolvedLibraryResultImplSearchFeatureSetProviderFileSystemStateFileTrackerboolLibraryContextTestingData	scheduler	byteStorefileContentCache	ephemeralunlinkedUnitStoreUnlinkedUnitStoreImplinfoDeclarationStoreNoOpInfoDeclarationStoreloggerpackagesexternalSummariesretainDataForTestingdriverstreamasBroadcastStreamadd
addedFilesAnalysisSessionImplelementFactoryanalysisSessionoverridehasChangedFiles
isNotEmptyhasPendingFilesknownFilePathstestDatalibraryContextanalysisOptionsdeclaredVariablessourceFactorymacroKernelBuildermacroExecutorfileSystemStatecontextRootrootpathnumberOfPendingFilestoListgrowablekeystoSet
differenceforEachremoveclearaddAllnotifyErrorsResultinteractive
completionisCompletedisFilePendingprioritygeneralchangedFileshasPendingChangedFilesgeneralChangedhasPendingImportFilesgeneralImportChangedhasPendingErrorFilesgeneralWithErrorsnothinghasUriisDartpathContextFutureDisposedAnalysisContextResultfuturevalueuriListPackageBundleReader	Uint8ListUriPackageBundleSdkBundleWriter
dynamicRefPackageBundleBuilderuritoStringLibraryElementResultelementLibraryElementImplwriteLibraryElement
addLibraryunitsmapesourcefinishresolutionBytessdkpackageBundleSdkchangedispose	completervaluescompleterListcompletecompleteErrorInvalidPathResultNotPathOfUriResultputIfAbsent
FileResultSomeFileResult	FileStategetFileForPathFileResultImplsessionlineInfoisAugmentationkindAugmentationFileKind	isLibraryisPartPartFileKindArgumentErrorSomeLibraryElementResulturiCacheparseisEmptyrootReferencegetChildLibraryElementResultImplgetFileForUriCannotResolveUriResultUriResolutionFilefileNotLibraryButAugmentationResultNotLibraryButPartResultUnimplementedErrorruntimeType
unitResultUnitElementResultlibraryInvalidResultUnspecifiedInvalidResultUriResolutionExternalLibrarygetLibraryElementParsedLibraryResultSomeParsedLibraryResultParsedUnitResultfilesunitFileParsedLibraryResultImplUriOfExternalLibraryResultResolvedLibraryResultsendCachedToStreamSomeParsedUnitResultRecordingErrorListenerCompilationUnitParsedUnitResultImplcontentuniterrors
removeLast	exception
stackTracefirstfileWasAnalyzedwithUnitperformanyPendingFileskipIfSameSignatureisUnchangedErrorserrorsResult
_signatureResolvedForCompletionResultImplOperationPerformanceImploffsetperformanceApiSignaturevariableNamesaddIntlengthget	addString
fileChangeaddFile
changeFile
removeFileverifyChangedFilesIfNeeded
_UNCHANGED	asLibraryunchangedErrorsrunAsyncwritelnnumOfAnalyzedLibrariesloadtargetLibraryLibraryAnalyzerlibraryOfUri2inheritanceManagertestingDataanalyzeResolvedUnitResultImpl	indexUnitAnalysisDriverUnitIndexBuilder!AnalysisDriverResolvedUnitBuilderencodeerrorindextoBufferputGetlibraryElement_indexcomputeUnitElementUnitElementResultImplErrorsResultImplAnalysisErrorbuildresourceProviderpackageDefaultFeatureSetcontextFeatures nonPackageDefaultLanguageVersionnonPackageLanguageVersionnonPackageDefaultFeatureSetnonPackageFeatureSet	workspacefileContentStrategyprefetchFilesisGenerated	onNewFile
fileSystemUnitAnalysisResultexistsdiscoverReferencedFilesaddUint32ListsignatureForElementstoUint32ListaddBoolenableDebugResolutionMarkers	signaturecontributeToResolutionSaltunlinkedSignatureresolvedUnitAnalysisDriverResolvedUnit
fromBufferAnalysisDriverUnitErrordecodeuriStrlibraryCycleapiSignaturecontentHashtoHex
isAbsolutecontainstmp	errorCodeCompileTimeErrorCodeMISSING_DART_LIBRARY	arguments
ownedFilesaddAddedaddKnowncollectAffectedinvalidateLibraryCyclereplaceAnalysisSession
StackTrace
contextKeyCaughtExceptionCaughtExceptionWithFilesfileContentMapentriesnestedkeyfilePathanalyzeForCompletionunitElement
parsedUnitresolvedNodes"AnalysisDriverExceptionFileBuildersorta	compareTob%AnalysisDriverExceptionContextBuilderDateTimenowmonthdayhourminutesecondmillisecondyearhasErrorOrWarningErrorSeverityerrorSeverityERRORresultsMonitorStatusSupportAnalysisStatushasFilesToAnalyzeanalysisContextaddedDriverpreTransitionToAnalyzingremovedDriver
StateErrortransitionToAnalyzingtransitionToIdlewaitForIdle	StopwatchstartPerformanceLogSectionelapsedMillisecondsresetsignal_maybeDispose_applyPendingFileChangesenterworkPriorityperformWorkexitdelayedDurationzeroFileSystemTestDataLibraryContextTestDatafileSystemTestData_fileTrackerchildrenname_priorityResultsSource
uniqueName	ErrorCodeerrorCodeByUniqueNameinstanceinstrumentationServicelogErrorDiagnosticMessageImplcontextMessagesmessageurl	forValuescorrectionMessage
correctionAnalysisDriverUnitErrorBuilderDiagnosticMessageBuildermessageText
includeUrlRegistryruleRegistrycodeForUniqueNamecontainsKeyIteratorFolder_sourceFactorydartSdksdkLibraries
mapDartUri
sdkLibrary	shortNamefullName
packageMapexpandfiteratormoveNextcurrent_fsStategetChildrenchildFile
knownFilesdefinedClassMemberNames	fileStampreferencedNamesAnalysisDriverGeneric›<ù®em{Èûﬂ•£MHÎ  /  ÄŸ  
dart:async  ÄÓ  dart:typed_data  Å	  ÅYmacroÅ\Cpackage:_fe_analyzer_shared/src/macros/executor/multi_executor.dart  Åd  6package:analyzer/dart/analysis/declared_variables.dart  Å•  +package:analyzer/dart/analysis/results.dart  Å€  "package:analyzer/dart/ast/ast.dart  Ç  !package:analyzer/error/error.dart  Ç4  $package:analyzer/error/listener.dart  Çc  )package:analyzer/exception/exception.dart  Çó  -package:analyzer/file_system/file_system.dart  Çœ  *package:analyzer/src/context/packages.dart  É  2package:analyzer/src/dart/analysis/byte_store.dart  ÉA  Epackage:analyzer/src/dart/analysis/driver_based_analysis_context.dart  Éë  <package:analyzer/src/dart/analysis/feature_set_provider.dart  Éÿ  :package:analyzer/src/dart/analysis/file_content_cache.dart  Ñ  2package:analyzer/src/dart/analysis/file_state.dart  ÑZ  4package:analyzer/src/dart/analysis/file_tracker.dart  Ñô  -package:analyzer/src/dart/analysis/index.dart  Ñ—  >package:analyzer/src/dart/analysis/info_declaration_store.dart  Ö  8package:analyzer/src/dart/analysis/library_analyzer.dart  Ö]  7package:analyzer/src/dart/analysis/library_context.dart  Öü  :package:analyzer/src/dart/analysis/performance_logger.dart  Ö‰  /package:analyzer/src/dart/analysis/results.dart  Ü  .package:analyzer/src/dart/analysis/search.dart  ÜW  /package:analyzer/src/dart/analysis/session.dart  Üë  .package:analyzer/src/dart/analysis/status.dart  Ü   4package:analyzer/src/dart/analysis/testing_data.dart  á	  ;package:analyzer/src/dart/analysis/unlinked_unit_store.dart  áO  .package:analyzer/src/dart/element/element.dart  áà  /package:analyzer/src/diagnostic/diagnostic.dart  á¬  %package:analyzer/src/error/codes.dart  áÚ  -package:analyzer/src/exception/exception.dartàaà´AnalysisContextAnalysisEngineAnalysisOptionsAnalysisOptionsImpl à*  *package:analyzer/src/generated/engine.dart  àÆ  *package:analyzer/src/generated/source.dart  à„  âlinterâ'package:analyzer/src/lint/registry.dart  â  /package:analyzer/src/summary/api_signature.dart  âY  (package:analyzer/src/summary/format.dart  âå  %package:analyzer/src/summary/idl.dart  âº  7package:analyzer/src/summary/package_bundle_reader.dart  â˛  3package:analyzer/src/summary2/ast_binary_flags.dart  ä<  0package:analyzer/src/summary2/bundle_writer.dart  äw  (package:analyzer/src/summary2/macro.dart  ä™  8package:analyzer/src/summary2/package_bundle_format.dart  äÌ  ã
file_pathsã")package:analyzer/src/util/file_paths.dart  ã/  @package:analyzer/src/util/performance/operation_performance.dart  ãz  -package:analyzer/src/utilities/uri_cache.dart    	dart:core¿ †w ¿m‘äÆ MÄõÄ◊ÄÿÄÌÅÅÅUÅcÅ§Å⁄ÇÇ3ÇbÇñÇŒÉÉ@ÉêÉ◊ÑÑYÑòÑ–ÖÖ\ÖûÖ„ÜÜVÜêÜ…ááNááá¡áÒà)à]à≠à‚ââXâãâªâ˝ä;ävä©äÏã.ãyã±ã≤ãÏãåAåèå‹ç*çyç…ééUéãéèé‹èèè@èDèìèƒè»êê^ê´ê„êÁë9ëäëøë√íí]íØí≥íˆì.ì~ì•ì¶ìÚî:îlîmî∫î“î˛îˇïBïbïcïóï√ïƒï˚ññ6ñTñUñóñùñ“óóóTó¢ó∑óÂóÊò/òPò|ò}ò∆ò›ôôôIôJôvô§ô•ôÏöö	öUölöíöìö√öƒõõ7õ8õÉõ∏õÿõŸúú0ú1úpúüú†úÊùùùWùÜùáùÀù¸ù˝û>ûcûdûÆû‚û„ü-üEünüoüπü˛üˇ†G†É†“†”°°`°~°≈°∆°Ú¢A¢B¢è¢Ÿ¢ˇ£;£<£É£“£”§§O§P§ó§”•"•#•l•ß•∆¶¶¶T¶ï¶∫¶Ù¶ıßCßëß∆ß«ßˆ®.®/®|®§®•®Ú©,©-©X©ó©ò©∆™™ ™!™S™î™ø™¿™Î´´	´3´4´b´c´Ñ´Ö´≤´”´‘¨¨¨¨X¨{¨|¨∏¨ﬂ¨‡≠)≠s≠ê≠∏≠πÆÆ7ÆYÆZÆtÆuÆ¶Æ¨Æ˚ØEØXØàØ¨Ø‹Ø˛∞(∞Z∞z∞ó∞Ø∞ƒ∞ﬁ±±0±`±~±ß±—±¯≤≤+≤Y≤y≤ï≤„≥.≥N≥é≥∫≥‘≥Ú¥¥J¥ê¥‘¥¯µµTµUµûµüµπµ”µÔµÛµÙ∂@∂y∂z∂∂∂Ò∂Ú∑∑H∑Ç∑Ü∑á∑¡∏
∏∏0∏[∏\∏h∏á∏´∏”∏˘ππ#π$πhπiπ∏∫∫;∫t∫u∫µ∫€ª
ª4ªfª}ªöªÕªˆº"ºGºuºôº∆ºÁºÓºÚºÛΩ3ΩvΩwΩ∞Ω˜Ω¯æEæëæíæûæ–æÍæ˚ø&øQømøóø¥ø∏øπ¿ @¿ @C¿ @D¿ @è¿ @ï¿ @’¿ @€¿ A'¿ Av¿ A«¿ A˜¿ A˝¿ B+¿ BW¿ Bù¿ B£¿ BÀ¿ C¿ C¿ C^¿ C®¿ CÙ¿ DD¿ D~¿ DÑ¿ D–¿ E¿ E¿ EU¿ E†¿ EÃ¿ EÕ¿ E˝¿ F¿ F¿ Fm¿ FÑ¿ Fπ¿ F∫¿ F∆¿ FÚ¿ G¿ GJ¿ GP¿ GÑ¿ G¥¿ G∫¿ G‡¿ H¿ H¿ HA¿ Hr¿ Hx¿ Hß¿ H‹¿ I¿ I¿ IG¿ Is¿ I§¿ I™¿ I÷¿ J¿ J¿ J8¿ Ji¿ Jo¿ J†¿ J—¿ J◊¿ J¸¿ K(¿ KX¿ Kä¿ Kî¿ Kú¿ K¢¿ KÃ¿ K˘¿ Kˇ¿ L'¿ LY¿ L_¿ Lé¿ L¬¿ L»¿ Lˆ¿ M0¿ M6¿ Mc¿ Mö¿ M†¿ M»¿ Mı¿ M˚¿ N/¿ N\¿ Nb¿ Nç¿ Në¿ Ní¿ Nû¿ Nº¿ Nﬂ¿ O¿ O¿ O¿ OV¿ Ov¿ Oõ¿ O∫¿ OÍ¿ OÛ¿ P¿ P¿ P¿ P¿ Pl¿ P´¿ P±¿ P˙¿ QI¿ Qï¿ Q·¿ R,¿ Ru¿ R®¿ R“¿ S¿ S?¿ Ss¿ Sí¿ Sü¿ Sﬁ¿ Sˇ¿ T/¿ T5¿ T9¿ T:¿ TÜ¿ Tπ¿ Tø¿ TÒ¿ U¿ U:¿ Ub¿ Uo¿ U©¿ U™¿ U—¿ UÚ¿ U˘¿ V2¿ V3¿ VT¿ Vy¿ V¥¿ VÁ¿ W3¿ Wm¿ Wn¿ Wó¿ W©¿ W“¿ W˛¿ X¿ X ¿ X(¿ X.¿ X/¿ Xd¿ Xe¿ Xç¿ X«¿ X‰¿ XÎ¿ XÔ¿ X¿ Y<¿ Yã¿ Yë¿ Y√¿ Y…¿ Z¿ Z!¿ Zo¿ Zº¿ [¿ [%¿ [+¿ [u¿ [º¿ \	¿ \(¿ \I¿ \l¿ \é¿ \ú¿ \¢¿ \„¿ ]¿ ](¿ ]G¿ ]z¿ ]É¿ ]¢¿ ]®¿ ]¨¿ ]≠¿ ]˚¿ ^G¿ ^ñ¿ ^Ê¿ ^˙¿ _¿ _9¿ _U¿ _Y¿ _Z¿ _¶¿ _ˆ¿ ` ¿ `O¿ `É¿ `†¿ `¶¿ `≈¿ `‚¿ a¿ a ¿ a!¿ a-¿ aO¿ ax¿ aé¿ a≥¿ a¥¿ a‹¿ b¿ bE¿ bÇ¿ bä¿ bê¿ b±¿ b≤¿ bÍ¿ c¿ cT¿ c\¿ cb¿ c¿ cÄ¿ c√¿ c¿ d-¿ d5¿ d;¿ dc¿ dd¿ d¢¿ dœ¿ e¿ e¿ e¿ e=¿ e>¿ ey¿ eπ¿ eø¿ eÍ¿ eÎ¿ f¿ f%¿ f)¿ f*¿ fx¿ f»¿ fÏ¿ fÚ¿ g$¿ g*¿ g|¿ g±¿ g‘¿ g˜¿ g˚¿ g¸¿ hH¿ hj¿ hp¿ h¢¿ h®¿ hÙ¿ i8¿ ir¿ iî¿ iØ¿ iÃ¿ i’¿ i€¿ i‹¿ i˛¿ j¿ j7¿ j@¿ jF¿ jG¿ j\¿ jw¿ j†¿ j©¿ jØ¿ j∞¿ j„¿ k)¿ kF¿ kc¿ kg¿ kh¿ k±¿ k‰¿ l*¿ lI¿ lá¿ l¥¿ l—¿ lÛ¿ l˜¿ l¯¿ mA¿ ml¿ m™¿ m…¿ mˇ¿ n$¿ nA¿ nc¿ ng¿ nh¿ nØ¿ nµ¿ nÁ¿ o¿ o5¿ oW¿ o]¿ o^¿ oí¿ o≠¿ oÃ¿ oﬁ¿ oÛ¿ p¿ pK¿ pz¿ p£¿ p™¿ pÆ¿ pØ¿ p˝¿ qH¿ qX¿ qì¿ q∂¿ qŒ¿ r¿ r¿ r-¿ rJ¿ rP¿ rã¿ r–¿ rÌ¿ s
¿ s¿ s¿ s`¿ sÆ¿ sı¿ t<¿ tb¿ tc¿ tî¿ tª¿ u¿ u?¿ uh¿ uì¿ u≈¿ uÕ¿ u”¿ u‘¿ v¿ v¿ v,¿ vU¿ vÄ¿ v†¿ v«¿ v˙¿ w.¿ wY¿ wÖ¿ wñ¿ wŸ¿ w„¿ w‰¿ x¿ xM¿ xî¿ xû¿ xü¿ xÂ¿ y¿ yF¿ y|¿ yµ¿ yø¿ y¿¿ yﬁ¿ z	¿ zA¿ za¿ z£¿ z‡¿ {¿ {¿ {¿ {¿ {i¿ {o¿ {°¿ {€¿ {˝¿ |¿ |%¿ |&¿ |H¿ |k¿ |q¿ |r¿ |¢¿ |æ¿ |·¿ }¿ }@¿ }g¿ }è¿ }ú¿ }€¿ }·¿ }‚¿ ~¿ ~/¿ ~S¿ ~É¿ ~∞¿ ~€¿ ~„¿  ¿ ¿ ¿ +¿ J¿ ^¿ e¿ i¿ j¿ µ¿ ¿ Ä¿ Ä4¿ ÄE¿ Än¿ Äô¿ Ä≈¿ Ä¿ Å¿ Å#¿ Å'¿ Å(¿ Åv¿ Å∆¿ Å¸¿ Ç¿ Ç4¿ Ç:¿ Çå¿ Çí¿ Ç›¿ É-¿ É{¿ Éƒ¿ Ñ¿ Ñ ¿ Ñl¿ Ñé¿ Ñ∞¿ Ñ∂¿ Ñ∑¿ ÑŸ¿ Ñ¸¿ Ö¿ Ö¿ Ö¿ Ö3¿ Ö\¿ Öe¿ Ök¿ Öl¿ Öú¿ Ö∏¿ Ö€¿ Ü¿ Üa¿ ÜÄ¿ Üü¿ ÜŒ¿ Ü˛¿ á%¿ áM¿ áZ¿ áô¿ áü¿ á£¿ á§¿ áÚ¿ àA¿ àw¿ à}¿ à»¿ â¿ âf¿ âØ¿ â˙¿ ä¿ äX¿ äÜ¿ äú¿ ä≠¿ ä÷¿ ã¿ ã/¿ ãZ¿ ãá¿ ãç¿ ãë¿ ãí¿ ã·¿ å)¿ å_¿ åe¿ åó¿ åù¿ åÔ¿ åı¿ çF¿ çï¿ ç÷¿ ç‹¿ é-¿ é¿ éœ¿ è¿ èR¿ èä¿ èµ¿ è◊¿ èÚ¿ ê¿ ê¿ ê¿ ê¿ êA¿ ê\¿ êz¿ êÉ¿ êâ¿ êä¿ ê´¿ ê±¿ êÎ¿ ë¿ ë)¿ ëR¿ ë\¿ ëÅ¿ ëâ¿ ëè¿ ëê¿ ë•¿ ë¿¿ ëÈ¿ ëÚ¿ ë¯¿ ë˘¿ í¿ íL¿ íå¿ í©¿ í∆¿ í ¿ íÀ¿ ì¿ ì=¿ ì{¿ ìù¿ ì∏¿ ì’¿ ìﬁ¿ ì‰¿ ìÂ¿ î¿ î"¿ î@¿ îI¿ îO¿ îP¿ îe¿ îÄ¿ î©¿ î≤¿ î∏¿ îπ¿ îÒ¿ ï<¿ ïY¿ ïv¿ ïz¿ ï{¿ ï¡¿ ï«¿ ï˘¿ ïˇ¿ ñQ¿ ñW¿ ñ¢¿ ñÓ¿ ó¿ ó8¿ óZ¿ ó|¿ óÇ¿ óÉ¿ ó∑¿ ó˜¿ ò(¿ òI¿ òh¿ ò¿ òî¿ ò±¿ ò–¿ ô	¿ ô8¿ ôa¿ ôs¿ ôí¿ ôô¿ ôù¿ ôû¿ ô™¿ ôœ¿ ôË¿ ö¿ ö¿ ö7¿ öy¿ öÖ¿ ö¬¿ öÓ¿ õ¿ õU¿ õï¿ õ√¿ õÀ¿ õŸ¿ õﬂ¿ õ‡¿ ú¿ ú'¿ úV¿ úé¿ ú∏¿ úƒ¿ ù¿ ù>¿ ùl¿ ùñ¿ ù†¿ ùÀ¿ ùÛ¿ û*¿ ûX¿ ûí¿ ûú¿ û ¿ û“¿ û‡¿ ûÊ¿ ûÁ¿ ü¿ ü5¿ ük¿ üw¿ ü¥¿ ü˙¿ † ¿ †*¿ †R¿ †ò¿ †“¿ †‹¿ °
¿ °¿ ° ¿ °&¿ °'¿ °H¿ °t¿ °ß¿ °„¿ ¢¿ ¢ ¿ ¢)¿ ¢S¿ ¢w¿ ¢¿ ¢ç¿ ¢ì¿ ¢î¿ ¢µ¿ ¢‡¿ £¿ £D¿ £Ü¿ £©¿ £±¿ £ø¿ £≈¿ £∆¿ £Ì¿ §¿ §Y¿ §ö¿ §–¿ §˙¿ •¿ •&¿ •4¿ •:¿ •;¿ •\¿ •ã¿ •¿¿ •Ó¿ •¸¿ ¶¿ ¶¿ ¶)¿ ¶]¿ ¶å¿ ¶ª¿ ¶ﬂ¿ ¶Û¿ ß'¿ ß/¿ ß=¿ ßC¿ ßD¿ ßm¿ ßô¿ ß›¿ ®¿ ®¿ ®A¿ ®I¿ ®W¿ ®]¿ ®^¿ ®~¿ ®£¿ ®œ¿ ®ˇ¿ ©¿ ©\¿ ©ì¿ ©ø¿ ©˙¿ ™,¿ ™B¿ ™r¿ ™~¿ ™ê¿ ™ö¿ ™¢¿ ™®¿ ™©¿ ™»¿ ™¿ ´!¿ ´-¿ ´e¿ ´û¿ ´∆¿ ¨¿ ¨T¿ ¨e¿ ¨ú¿ ¨Ÿ¿ ¨„¿ ≠¿ ≠B¿ ≠p¿ ≠Ç¿ ≠Æ¿ ≠∂¿ ≠ƒ¿ ≠ ¿ ≠Œ¿ ≠œ¿ Æ¿ Æ$¿ ÆV¿ Æ\¿ Æ•¿ ÆÚ¿ Ø¿ Ø6¿ ØY¿ Ø{¿ Øâ¿ Øè¿ Ø–¿ Ø¸¿ ∞¿ ∞A¿ ∞`¿ ∞ì¿ ∞ú¿ ∞ª¿ ∞¡¿ ∞≈¿ ∞∆¿ ±¿ ±"¿ ±;¿ ±n¿ ±{¿ ±≠¿ ±ø¿ ±’¿ ±ı¿ ±¸¿ ≤,¿ ≤I¿ ≤n¿ ≤r¿ ≤s¿ ≤≤¿ ≤Î¿ ≥¿ ≥¿ ≥;¿ ≥j¿ ≥à¿ ≥®¿ ≥Æ¿ ≥≤¿ ≥≥¿ ≥◊¿ ¥¿ ¥3¿ ¥U¿ ¥õ¿ ¥º¿ ¥ﬁ¿ µ¿ µ¿ µ:¿ µc¿ µt¿ µô¿ µ¬¿ ∂¿ ∂R¿ ∂s¿ ∂Ñ¿ ∂å¿ ∂í¿ ∂≥¿ ∂¥¿ ∂˘¿ ∑2¿ ∑3¿ ∑g¿ ∑¶¿ ∑”¿ ∑˝¿ ∏¿ ∏A¿ ∏L¿ ∏T¿ ∏Z¿ ∏^¿ ∏_¿ ∏ß¿ ∏Û¿ π=¿ πá¿ πµ¿ π–¿ π‘¿ π’¿ ∫$¿ ∫8¿ ∫>¿ ∫¿ ∫ª¿ ∫ˆ¿ ∫¸¿ ªL¿ ªõ¿ ª‘¿ º¿ º[¿ ºè¿ ºê¿ º‘¿ º¿ Ω$¿ Ω%¿ ΩK¿ Ωå¿ ΩΩ¿ Ωæ¿ æ¿ æ-¿ æF¿ æ~¿ æ∏¿ æ¿¿ æ∆¿ æ«¿ ø¿ ø*¿ øQ¿ øl¿ ø∞¿ ø∏¿ øæ¿ øø¿ ¿¿ ¿P¿ ¿x¿ ¿Ñ¿ ¿∞¿ ¿±¿ ¿ﬂ¿ ¡!¿ ¡+¿ ¡,¿ ¡[¿ ¡û¿ ¡®¿ ¡©¿ ¡Ã¿ ¡Ó¿ ¬)¿ ¬4¿ ¬5¿ ¬\¿ ¬é¿ ¬´¿ ¬Ù¿ √@¿ √S¿ √{¿ √ü¿ √¥¿ √µ¿ ƒ¿ ƒ¿ ƒ)¿ ƒc¿ ƒç¿ ƒ∑¿ ƒ∏¿ ƒ‹¿ ≈¿ ≈9¿ ≈:¿ ≈y¿ ≈≠¿ ≈ﬂ¿ ≈¯¿ ∆¿ ∆*¿ ∆+¿ ∆c¿ ∆¿ ∆£¿ ∆∞¿ ∆€¿ ∆‹¿ «¿ «C¿ «O¿ «P¿ «ü¿ «ﬁ¿ »¿ »¿ »S¿ »T¿ »v¿ »í¿ »ﬁ¿ »Û¿ …!¿ …<¿ …e¿ …á¿ …¥¿ …«¿ …ﬁ¿ …Ô¿ …˝¿  	¿  ¿  ¿  =¿  x¿  ù¿  ÷¿  ¯¿ À¿ À?¿ ÀI¿ ÀJ¿ Ày¿ À≥¿ À ¿ ÀÚ¿ Ã¿ ÃY¿ Ãõ¿ Ã£¿ Ã´¿ ÃØ¿ Ã∞¿ Ã‹¿ Ãˆ¿ Õ¿ ÕQ¿ Õz¿ Õ~¿ Õ¿ Õƒ¿ Œ¿ Œ5¿ Œ9¿ Œ:¿ ŒÑ¿ Œò¿ Œ’¿ ŒÚ¿ Œ˛¿ œ1¿ œK¿ œ`¿ œf¿ œg¿ œã¿ œ‘¿ œ˛¿ –¿ –?¿ –x¿ –Å¿ –Ç¿ –´¿ –·¿ —¿ —O¿ —ü¿ —∂¿ —‚¿ “
¿ “ ¿ “R¿ “S¿ “†¿ “Œ¿ “¯¿ ”.¿ ”H¿ ”j¿ ”u¿ ”û¿ ”«¿ ‘¿ ‘¿ ‘¿ ‘¿ ‘D¿ ‘e¿ ‘ö¿ ‘∏¿ ‘¡¿ ‘¬¿ ‘È¿ ’¿ ’"¿ ’#¿ ’8¿ ’@¿ ’D¿ ’E¿ ’ã¿ ’ø¿ ’¿¿ ÷¿ ÷ ¿ ÷T¿ ÷U¿ ÷û¿ ÷∆¿ ÷Á¿ ◊¿ ◊@¿ ◊I¿ ◊è¿ ◊≥¿ ◊‘¿ ◊Ë¿ ◊ˇ¿ ÿ ¿ ÿ[¿ ÿå¿ ÿ∑¿ ÿ—¿ ÿ⁄¿ ÿ‚¿ ÿÊ¿ ÿÁ¿ Ÿ¿ Ÿ1¿ ŸZ¿ Ÿa¿ Ÿ~¿ Ÿù¿ Ÿ¥¿ Ÿ…¿ ŸË¿ ⁄!¿ ⁄P¿ ⁄y¿ ⁄è¿ ⁄ñ¿ ⁄ö¿ ⁄õ¿ ⁄⁄¿ ⁄‡¿ €/¿ €>¿ €\¿ €m¿ €n¿ €°¿ €≈¿ €¿ ‹¿ ‹M¿ ‹u¿ ‹´¿ ‹ı¿ ‹¸¿ ‹˝¿ ›¿ ›,¿ ›>¿ ›W¿ ›c¿ ›x¿ ›¶¿ ›ø¿ ›◊¿ ›Ô¿ ﬁ	¿ ﬁ:¿ ﬁg¿ ﬁÇ¿ ﬁ£¿ ﬁ¿¿ ﬁÊ¿ ﬁÌ¿ ﬂ6¿ ﬂ:¿ ﬂ;¿ ﬂn¿ ﬂã¿ ﬂ∑¿ ﬂæ¿ ﬂ·¿ ‡ ¿ ‡¿ ‡,¿ ‡G¿ ‡d¿ ‡É¿ ‡º¿ ‡Î¿ ·¿ ·1¿ ·R¿ ·Y¿ ·]¿ ·^¿ ·¨¿ ·Ù¿ ‚¿ ‚^¿ ‚b¿ ‚c¿ ‚©¿ ‚Ô¿ „9¿ „?¿ „á¿ „”¿ ‰!¿ ‰n¿ ‰∫¿ ‰Ë¿ ‰Ó¿ Â:¿ ÂJ¿ Âg¿ Ââ¿ Âó¿ Âù¿ Â¿¿ Â¡¿ Âˆ¿ Ê:¿ Êm¿ Êû¿ Ê√¿ ÊÎ¿ ÊÛ¿ Ê˘¿ Ê˝¿ Ê˛¿ Á¿ Á?¿ ÁM¿ ÁS¿ Áw¿ Áx¿ Á™¿ Áœ¿ Á’¿ ÁŸ¿ Á⁄¿ ÁÔ¿ Ë¿ Ë'¿ ËE¿ ËI¿ ËJ¿ Ëj¿ Ëã¿ Ë¨¿ ËÌ¿ È¿ ÈI¿ ÈM¿ ÈN¿ Èp¿ Èë¿ È≤¿ È”¿ Í¿ Í;¿ Íi¿ Íj¿ Í¶¿ ÍŸ¿ Í⁄¿ Î
¿ Î¿ Î¿ Î/¿ ÎP¿ Îq¿ Îí¿ Î–¿ Î˛¿ Ï¿ Ï¿ ÏN¿ Ï{¿ Ï©¿ ÏΩ¿ Ï”¿ ÏÍ¿ Ïˇ¿ Ì"¿ ÌC¿ ÌJ¿ Ìá¿ Ì√¿ ÌÛ¿ Ó¿ ÓC¿ Óz¿ Óõ¿ Ó¥¿ ÓÀ¿ ÓË¿ Ô¿ Ô#¿ Ô^¿ Ôè¿ Ô∫¿ Ô÷¿ ÔÓ¿ Ô˜¿ ?¿ L¿ ~¿ í¿ ™¿ ≥¿ ˜¿ ˝¿ Ò¿ Ò¿ ÒC¿ Òs¿ Òµ¿ ÒÈ¿ Ú!¿ Úe¿ Úà¿ Ú´¿ Ú≥¿ Úπ¿ ÚÃ¿ Ú–¿ Ú—¿ Û¿ ÛL¿ Ûn¿ Ûr¿ Ûs¿ Ûƒ¿ Ù¿ ÙR¿ Ù¿ Ù∞¿ Ùﬁ¿ ı¿ ı@¿ ık¿ ıâ¿ ıç¿ ıé¿ ı∑¿ ı›¿ ˆ¿ ˆ(¿ ˆ=¿ ˆr¿ ˆ†¿ ˆß¿ ˆ´¿ ˆ¨¿ ˆ“¿ ˜¿ ˜¿ ˜¿ ˜O¿ ˜w¿ ˜ß¿ ˜º¿ ˜ƒ¿ ˜ ¿ ˜‹¿ ˜‡¿ ˜·¿ ¯¿ ¯/¿ ¯N¿ ¯k¿ ¯l¿ ¯ß¿ ¯≈¿ ¯Õ¿ ¯”¿ ¯◊¿ ¯ÿ¿ ˘ ¿ ˘W¿ ˘Ü¿ ˘±¿ ˘È¿ ˙¿ ˙1¿ ˙H¿ ˙]¿ ˙|¿ ˙µ¿ ˙‰¿ ˚¿ ˚¿ ˚8¿ ˚W¿ ˚l¿ ˚Å¿ ˚¡¿ ˚‰¿ ˚Ô¿ ˚¯¿ ˚ˇ¿ ¸!¿ ¸e¿ ¸i¿ ¸j¿ ¸é¿ ¸∂¿ ¸‘¿ ˝ ¿ ˝-¿ ˝<¿ ˝i¿ ˝q¿ ˝w¿ ˝{¿ ˝|¿ ˝®¿ ˝Õ¿ ˝ﬁ¿ ˝‰¿ ˛¿ ˛4¿ ˛5¿ ˛Y¿ ˛ç¿ ˛é¿ ˛ÿ¿ ˛˚¿ ˇ¿ ˇ>¿ ˇe¿ ˇm¿ ˇó¿ ˇù¿ ˇû¿ ˇ⁄¿ ˇ˚¿ ¿ ¿ ¿ W¿ o¿ ó¿ ¥¿ €¿ ¿%¿+¿,¿q¿r¿ü¿†¿™¿‹¿˛¿*¿K¿{¿Ø¿π¿»¿Ï¿¿&¿8¿z¿¬¿»¿…¿˙¿7¿v¿~¿Ñ¿Ö¿£¿∫¿“¿˙¿¿5¿>¿E¿I¿J¿å¿∂¿¬¿¿)¿M¿b¿j¿k¿è¿§¿¨¿≠¿›¿ﬁ¿$¿B¿x¿y¿õ¿µ¿”¿¯¿¿B¿O¿Z¿c¿≠¿Æ¿⁄¿	
¿	%¿	l¿	∂¿	«¿	Ì¿
¿
-¿
A¿
a¿
É¿
•¿
Æ¿
Ø¿
›¿¿¿1¿N¿m¿é¿Ω¿ﬂ¿¿¿%¿)¿*¿q¿¢¿—¿‰¿Ò¿¿¿)¿R¿è¿∆¿€¿¿U¿Ü¿†¿œ¿ ¿$¿Q¿R¿r¿î¿™¿≤¿≥¿’¿¯¿¿2¿:¿;¿a¿â¿Ø¿÷¿¿,¿]¿°¿¢¿«¿Ÿ¿Î¿˛¿¿¿	¿X¿á¿µ¿◊¿¿$¿(¿)¿n¿ò¿Ω¿Ò¿¿Y¿Ü¿≠¿Ω¿≈¿À¿Ô¿Û¿ı¿ˆ¿E¿í¿‚¿˘¿ ¿Y¿w¿x¿¬¿»¿¿¿X¿†¿Î¿¿¿a¿å¿ç¿ﬁ¿Ù¿˙¿,¿2¿Å¿û¿ü¿‚¿˝¿˛¿:¿X¿Z¿[¿¨¿¸¿¿/¿:¿E¿Z¿r¿Ñ¿î¿†¿Ø¿º¿æ¿ø¿¿F¿f¿™¿∞¿ˇ¿M¿ç¿ƒ¿≈¿¿c¿±¿€¿·¿,¿y¿»¿ ¿ ¿ #¿ $¿ p¿ ñ¿ ó¿  ¿ ¿!(¿!)¿!B¿!C¿!é¿!µ¿!ª¿!Ù¿"¿"¿"X¿"Y¿"ë¿"ø¿"¿¿"ˇ¿#=¿#>¿#¿#ü¿#‘¿#˙¿$¿$¿$¿$/¿$3¿$4¿$v¿$°¿$ª¿$“¿%¿%B¿%H¿%L¿%M¿%ì¿%¨¿%€¿&,¿&L¿&c¿&í¿&ñ¿&ó¿&‚¿'¿'5¿'Y¿'Ö¿'ã¿'®¿'ø¿'√¿'ƒ¿(¿(9¿(J¿(^¿(°¿(ß¿(º¿(»¿(Ã¿(Õ¿)¿)b¿)Ø¿)ı¿*.¿*M¿*{¿*§¿*™¿*Æ¿*Ø¿*˛¿+¿+P¿+c¿+°¿+¢¿+Ó¿,¿,"¿,p¿,Ä¿,¨¿,ÿ¿,Î¿-
¿-R¿-í¿-©¿-±¿-≤¿-œ¿-–¿. ¿.(¿.P¿.Z¿.b¿.c¿.à¿.∞¿.›¿.Á¿.Ô¿.¿/0¿/P¿/Ä¿/∏¿/¿¿/¡¿/ı¿0"¿0n¿0•¿0‰¿1¿16¿1Y¿1c¿1k¿1l¿1ë¿1Õ¿2¿2H¿2z¿2ô¿2Ø¿2ª¿2≈¿2Õ¿2Œ¿3¿3#¿3N¿3o¿3è¿3ó¿3ò¿3≈¿4¿4¿4¿4¿4P¿4v¿4w¿4ô¿4≤¿4∏¿4º¿4Ω¿5
¿5!¿5N¿5d¿5Å¿5á¿5”¿5◊¿5Ÿ¿5⁄¿5˘¿6$¿6%¿6[¿6¿6Ñ¿6Ö¿6©¿6™¿6Ã¿6Õ¿7¿7¿7,¿7k¿7Æ¿7Á¿7Î¿7Ï¿8$¿8H¿8L¿8N¿8O¿8}¿8Å¿8Œ¿9¿9`¿9ù¿9°¿9Ó¿:3¿:J¿:ñ¿:‡¿:˙¿;¿;¿;6¿;7¿;s¿;Ø¿;◊¿;ÿ¿<¿<[¿<á¿<à¿<•¿<Œ¿<œ¿<Ë¿=1¿=T¿=o¿=á¿=à¿=∫¿=‹¿=˘¿>¿>+¿>,¿>C¿>ä¿>≠¿> ¿>‚¿>‰¿>Â¿?2¿?6¿?r¿?ë¿?„¿@4¿@_¿@`¿@®¿@’¿@◊¿@ÿ¿@Ó¿A¿A!¿AD¿AJ¿As¿Aé¿A‹¿A˘¿BF¿Bï¿B≥¿BË¿C(¿C;¿CA¿CB¿Cw¿C®¿C≈¿C‡¿Cˇ¿D%¿DG¿Dk¿Dç¿D∂¿D¡¿D ¿D–¿D—¿Dı¿E¿E'¿EC¿E_¿E}¿E ¿EÚ¿E˘¿E˝¿E˛¿FD¿F|¿F≠¿F»¿FÍ¿G¿G2¿Gm¿Gè¿G´¿G∂¿Gø¿G≈¿G∆¿GÒ¿H¿H)¿HW¿Hu¿Hü¿H«¿HŒ¿H“¿H”¿I#¿II¿Iá¿IÕ¿I—¿I”¿I‘¿J¿J¿Je¿Jk¿Jä¿J£¿J§¿J‘¿K ¿K¿KF¿Ki¿Kj¿Kª¿L	¿LW¿Lä¿L¶¿Lß¿Lª¿L◊¿L˘¿M¿M4¿M:¿M<¿M=¿Ml¿M¿M°¿M’¿N¿N¿N*¿Nr¿N∂¿NË¿NÈ¿O#¿OK¿Og¿Ok¿Ol¿O¶¿OŒ¿Oˆ¿O¸¿P ¿P¿P¿P,¿PM¿Pí¿PΩ¿Pæ¿P‰¿Q¿Q¿Q¿QS¿Qc¿Qá¿Q±¿Q≤¿Q—¿Q“¿R	¿R
¿R.¿R/¿RP¿RQ¿Rf¿Rg¿Rì¿Rî¿R≈¿R∆¿S¿S^¿SÑ¿Só¿Sπ¿S‡¿S·¿T¿T5¿TR¿Tâ¿T“¿TÌ¿T˜¿Tˇ¿U ¿U0¿Ui¿Uâ¿Uœ¿Uﬁ¿V¿V¿V¿V¿VL¿Vx¿V°¿VÕ¿VÙ¿Vı¿W;¿Wà¿W√¿W”¿W€¿W·¿W‚¿X¿X+¿Xf¿Xv¿X~¿X£¿Xœ¿X’¿X÷¿X˘¿Y¿Y'¿YA¿YE¿YF¿Yv¿YÄ¿YΩ¿YÌ¿Z
¿Z+¿Za¿Z~¿Zä¿Z∞¿Z⁄¿Z‰¿ZÏ¿Zˇ¿[¿[¿[¿[:¿[R¿[l¿[ã¿[å¿[Ÿ¿\$¿\@¿\A¿\Ü¿\á¿\ì¿\≈¿\«¿\»¿\‹¿\Ò¿]¿]¿]5¿]6¿]B¿]X¿]Å¿]Ö¿]á¿]à¿]µ¿]∂¿^¿^3¿^]¿^á¿^à¿^ß¿^º¿_¿_¿_5¿_d¿_î¿_ï¿_“¿_”¿`"¿`r¿`≠¿`≥¿a ¿aJ¿aú¿aœ¿a‚¿b¿bJ¿bk¿bç¿bÿ¿bˇ¿c¿c¿c?¿ca¿cå¿c°¿c©¿c™¿c»¿c˜¿d4¿dm¿dé¿dñ¿d¥¿d∫¿dª¿d÷¿dË¿dÏ¿dÓ¿dÔ¿e:¿eâ¿eì¿eµ¿e€¿f¿f¿f%¿f:¿fÅ¿fÇ¿fò¿fπ¿f◊¿fÿ¿g¿g¿gB¿gC¿gí¿g‚¿h¿h#¿hp¿h∫¿i¿i?¿iR¿iÑ¿iü¿iø¿i≈¿i∆¿iÂ¿j¿j2¿jc¿jÄ¿jÜ¿já¿j≥¿jÍ¿k¿kW¿km¿ku¿k∞¿k·¿l
¿l¿l¿l¿lN¿lx¿lâ¿lç¿lè¿lê¿lµ¿l ¿lﬁ¿m¿mY¿mZ¿m{¿mì¿m≠¿mÃ¿m“¿m‘    .Äÿ  ÄÌ  ÅÅ] Åc  Å§  Å⁄  Ç  Ç3  Çb  Çñ  ÇŒ  É  É@  Éê  É◊  Ñ  ÑY  Ñò  Ñ–  Ö  Ö\  Öû  Ö„  Ü  ÜV  Üê  Ü…  á  áN  áá  á¡  áÒ  à) àaà´à≠  à‚â â  âX  âã  âª  â˝  ä;  äv  ä©  äÏã# ã.  ãy    ã≤¿	Bí¸áC/// This class computes [AnalysisResult]s for Dart files.
///
/// Let the set of "explicitly analyzed files" denote the set of paths that have
/// been passed to [addFile] but not subsequently passed to [removeFile]. Let
/// the "current analysis results" denote the map from the set of explicitly
/// analyzed files to the most recent [AnalysisResult] delivered to [results]
/// for each file. Let the "current file state" represent a map from file path
/// to the file contents most recently read from that file, or fetched from the
/// content cache (considering all possible file paths, regardless of
/// whether they're in the set of explicitly analyzed files). Let the
/// "analysis state" be either "analyzing" or "idle".
///
/// (These are theoretical constructs; they may not necessarily reflect data
/// structures maintained explicitly by the driver).
///
/// Then we make the following guarantees:
///
///    - Whenever the analysis state is idle, the current analysis results are
///      consistent with the current file state.
///
///    - A call to [addFile] or [changeFile] causes the analysis state to
///      transition to "analyzing", and schedules the contents of the given
///      files to be read into the current file state prior to the next time
///      the analysis state transitions back to "idle".
///
///    - If at any time the client stops making calls to [addFile], [changeFile],
///      and [removeFile], the analysis state will eventually transition back to
///      "idle" after a finite amount of processing.
///
/// As a result of these guarantees, a client may ensure that the analysis
/// results are "eventually consistent" with the file system by simply calling
/// [changeFile] any time the contents of a file on the file system have changed.
///
/// TODO(scheglov) Clean up the list of implicitly analyzed files. Æwá{ ØGØUÄ«/// Create a new instance of [AnalysisDriver].
///
/// The given [SourceFactory] is cloned to ensure that it does not contain a
/// reference to an [AnalysisContext] in which it could have been used.Ø\*Ø~  ØåØ•  Ø∞*ØÀ  Ø‡ØÙ  ∞$∞  ∞,,∞J  ∞^∞q  ∞~∞Ñ  ∞õ∞°  ∞≥∞π  ∞»∞Œ  ∞‚"∞ı  ±
$±  ±4*±K  ±d±j  ±Ç#±ï  ±´$±ø  ±’!±€  ±¸≤  B±w±Ò≤≤≤ ≤E≤3≤G≤l≤a≤n≤ì≤Å≤≤≤°≤µ≤≈≤∆≤œ≤‡≤–≤˛≤Î≥≥ ≥≥*≥+≥L≥6≥o≥Z≥r≥ä≥ã≥ß≥ñ≥©≥ ≥¬≥Ã≥Ê≥‹≥Ë¥	≥˙¥¥5¥"¥7¥d¥R¥x¥f¥{¥å¥ç¥§¥ò¥ª¥À¥¶¥Ω¥»¥…¥Õ5ì0sìëM/// The version of data format, should be incremented on every format change.ì†ì®Ä¬îGÄè/// The number of exception contexts allowed to write. Once this field is
/// zero, we stop writing any new exception contexts in this process.îhîoÄçîÚ`/// The scheduler that schedules analysis work in this, and possibly other
/// analysis drivers. ï_ïY@/// The logger to write performed operations and performance to. ïe\ï∞1/// The resource provider for working with files. ï∆ÄåñHk/// The byte storage to get and put serialized data.
///
/// It can be shared with other [AnalysisDriver]s. ñWÄ≠ñÔv/// The cache of deserialized data read from SummaryDataReader.
///
/// It can be shared with other [AnalysisDriver]s. ó	Ä⁄ó—Ä©/// The optional store with externally provided unlinked and corresponding
/// linked summaries. These summaries are always added to the store for any
/// file analysis. óËÄíòie/// This [ContentCache] is consulted for a file content before reading
/// the content from the file. òÄäò˜[/// The already loaded unlinked units,  consulted before deserializing
/// from file again. ô9ô3  ôLVôí)/// The analysis options to analyze with. ôß_ô˝D/// The [Packages] object with packages and their language versions. öÄÖöÇ^/// The [SourceFactory] is used to resolve URIs to paths and restore URIs
/// from file paths. öï,öØ  ö∆oõ(?/// The instance of macro executor that is used for all macros. õ:ÄúõÃ{/// The container, shared with other drivers within the same collection,
/// into which all drivers record files ownership. õ€Sú'/// The declared environment variables. ú3júé</// The analysis context that created this driver / session. ú¢qúÛC/// The salt to mix into all hashes used as keys for unlinked data.ùùùùùlùd>/// The salt to mix into all hashes used as keys for elements.ùwùÅùÉùÇùâqùÿA/// The salt to mix into all hashes used as keys for linked data.ùÌù˜ù˘ù¯ùˇbûF>/// The set of priority files, that should be analyzed sooner.û_û`ûWû^ûXûfzû»G/// The file changes that should be applied before processing requests.ûﬁûﬂûÂÄáüS]/// When [_applyFileChangesSynchronously] is `true`, affected files are
/// accumulated here.üjüküqÄãü¡G/// The completers to complete after [_pendingFileChanges] are applied.ü˙ü˚ü·ü˘ü‚üÎü¯üÏüü˜üÒ†Äœ†ã/// The mapping from the files for which analysis was requested using
/// [getResult] to the [Completer]s to report the result.†Œ†œ†ù†Õ†û†¶†™†Ã†´†¥†À†µ†’ÄÓ°hÄà/// The mapping from the files for which analysis was requested using
/// [getResolvedLibrary] to the [Completer]s to report the result.°¡°¬°Ñ°¿°Ö°ñ°ö°ø°õ°§°æ°•°»w¢)/// The queue of requests for completion.¢=¢>¢DÄı£Ä∂/// The task that discovers available files.  If this field is not `null`,
/// and the task is not completed, it should be performed and completed
/// before any name searching task. £>Äí£ãD/// The list of tasks to compute files defining a class member name.£Œ£œ£´£Õ£¨£’x§:/// The list of tasks to compute files referencing a name.§K§L§0§J§1§RÄŒ§€~/// The mapping from the files for which errors were requested using
/// [getErrors] to the [Completer]s to report the result.••§Û•§Ù§¸• •••
•••%Ä‹•Ø/// The mapping from the files for which the index was requested using
/// [getIndex] to the [Completer]s to report the result.•ˇ¶ •Ã•˛•Õ•’•Ÿ•˝•⁄•„•¸•‰•˚¶ÄÏ¶ùÄå/// The mapping from the files for which the unit element was requested using
/// [getUnitElement] to the [Completer]s to report the result.¶¶Ò¶¿¶Ô¶¡¶…¶Õ¶Ó¶Œ¶◊¶Ì¶ÿ¶˜ÄÕßØÄó/// The list of dispose requests, added in [dispose2], almost always empty.
/// We expect that at most one is added, at the very end of the life cycle.ß¬ß√ß…cß˛,/// The controller for the [results] stream.®®"®)®#®*®+®1q®òJ/// The stream that will be written to when analysis results are produced. ®ßÄÉ©J/// Resolution signatures of the most recently produced results for files.©(©)©/f©Ä(/// Cached results for [_priorityFiles].©ì©î©öÄÑ©˛+/// Cached results of [getResolvedLibrary].™™™#Äö™}//// The controller for the [exceptions] stream.™ö™™™∫™´™ª™º™¬D™ˇ(/// The instance of the [Search] helper. ´&´)  ´6*´N  ´e´z  ´áJ´≈*/// The [FileTracker] used by this driver. ´÷F¨-/// Whether resolved units should be indexed. ¨!X¨j6/// The context in which libraries should be analyzed. ¨~_¨ø9/// Whether `dart:core` has been transitively discovered.¨ÿ¨‚Ä‘≠óÄ©/// This flag is reset to `false` when a new file is added, because it
/// might be a library, so that some files that were disconnected parts
/// could be analyzed now.≠±≠ªÄúÆLy/// If testing data is being retained, a pointer to the object that is
/// retaining the testing data.  Otherwise `null`. Æ\Æa ÆmµˆÄÇ∂RI/// Return the set of files explicitly added to analysis using [addFile].   ∂|t∂Ã9/// Return the analysis options used to control analysis.   ∂ÙÄë∑7(/// Return the current analysis session.   ∑âÄÄ∑ﬂ7/// Return the stream that produces [ExceptionResult]s.   ∏M∏F"/// The current file system state.   ∏^Äƒ∏s   ∏^∏_π&Aπ/    πkÅ∫MÄÀ/// Return the set of files that are known at this moment. This set does not
/// always include all added files or all implicitly used file. If a file has
/// not been processed yet, it might be missing.   ∫wÇz∫ =/// Return the context in which libraries should be analyzed.   ºıÄÄΩ@=/// Return the path of the folder at the root of the context.   Ωy}Ω∫6/// Return the number of files scheduled for analysis.   Ω˙ÄñæXJ/// Return the list of files that the driver should try to analyze sooner.   æîÅ#æ§  æ≤æ¿  æîæïøªÄá¿ @I/// Return the [ResourceProvider] that is used to access the file system.   ¿ @FÖÖ¿ EµÖ%/// Return the [Stream] that produces [AnalysisResult]s for added files.
///
/// Note that the stream supports only one single subscriber.
///
/// Analysis starts when the [AnalysisDriverScheduler] is started and the
/// driver is added to it. The analysis state transitions to "analyzing" and
/// an analysis result is produced for every added file prior to the next time
/// the analysis state transitions to "idle".
///
/// [ResolvedUnitResult]s are produced for:
/// 1. Files requested using [getResult].
/// 2. Files passed to [addFile] which are also in [priorityFiles].
///
/// [ErrorsResult]s are produced for:
/// 1. Files passed to [addFile] which are not in [priorityFiles].
///
/// At least one analysis result is produced for every file passed to
/// [addFile] or [changeFile] prior to the next time the analysis state
/// transitions to "idle", unless the file is later removed from analysis
/// using [removeFile]. Analysis results for other files are produced only if
/// the changes affect analysis results of other files.
///
/// More than one result might be produced for the same file, even if the
/// client does not change the state of the files.
///
/// Results might be produced even for files that have never been added
/// using [addFile], for example when [getResult] was called for a file.   ¿ EœM¿ F
-/// Return the search support for the driver.   ¿ F Äò¿ Fòa/// Return the source factory used to resolve URIs to paths and restore URIs
/// from file paths.   ¿ Fºá‘¿ F„   ¿ Fº¿ FΩ:¿ NîÅá¿ N•  ¿ N≠¿ Nµ  ¿ Nî¿ Nï¿ PÑ¿ RåÇE/// Return a [Future] that completes after pending file changes are applied,
/// so that [currentSession] can be used to compute results.
///
/// The value is the set of all files that are potentially affected by
/// the pending changes. This set can be both wider than the set of analyzed
/// files (because it may include files imported from other packages, and
/// which are on the import path from a changed file to an analyze file),
/// and narrower than the set of analyzed files (because only files that
/// were previously accessed are considered to be known and affected).   ¿ T<Ñ≤¿ UÄÆ/// Builds elements for library files from [uriList], and packs them into
/// a bundle suitable for [PackageBundleReader].
///
/// Disconnected non-library files are ignored. ¿ U¿ U2  ¿ U>"¿ UQ   ¿ XÚÑπ¿ \/É/// The file with the given [path] might have changed - updated, added or
/// removed. Or not, we don't know. Or it might have, but then changed back.
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither.
///
/// Causes the analysis state to transition to "analyzing" (if it is not in
/// that state already). Schedules the file contents for [path] to be read
/// into the current file state prior to the next time the analysis state
/// transitions to "idle".
///
/// Invocation of this method will not prevent a [Future] returned from
/// [getResult] from completing with a result, but the result is not
/// guaranteed to be consistent with the new current file state after this
/// [changeFile] invocation. ¿ \:¿ \B   ¿ ]ØÅ©¿ _ÅB/// Clear the library context and any related data structures. Mostly we do
/// this to reduce memory consumption. The library context holds to every
/// library that was resynthesized, but after some initial analysis we might
/// not get again to many of these libraries. So, we should clear the context
/// periodically.   ¿ _\Å√¿ `Äó/// Return a [Future] that completes when discovery of all files that are
/// potentially available is done, so that they are included in [knownFiles].   ¿ a#Ö¿ a<   ¿ a#¿ a$¿ f,ÅŒ¿ gíÅC/// Return the cached [ResolvedUnitResult] for the Dart file with the given
/// [path]. If there is no cached result, return `null`. Usually only results
/// of priority files are cached.
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither. ¿ g¢¿ g™   ¿ g˛Éh¿ iSÅ-/// Return a [Future] that completes with the [ErrorsResult] for the Dart
/// file with the given [path].
///
/// The [path] must be absolute and normalized.
///
/// This method does not use analysis priorities, and must not be used in
/// interactive analysis, such as Analysis Server or its plugins. ¿ i]¿ ie   ¿ kjÅå¿ k˚w/// Return a [Future] that completes with the list of added files that
/// define a class member with the given [name]. ¿ l¿ l#   ¿ l˙Ål¿ mÉo/// Return a [Future] that completes with the list of known files that
/// reference the given external [name]. ¿ mõ¿ m£   ¿ njÇC¿ n¯x/// Return the [FileResult] for the Dart file with the given [path].
///
/// The [path] must be absolute and normalized. ¿ o¿ o   ¿ p±Ç\¿ q{Ä¢/// Return a [Future] that completes with the [AnalysisDriverUnitIndex] for
/// the file with the given [path], or with `null` if the file cannot be
/// analyzed. ¿ qÑ¿ qå   ¿ sà
¿ tÄﬂ/// Return a [Future] that completes with [LibraryElementResult] for the given
/// [uri], which is either resynthesized from the provided external summary
/// store, or built for a file to which the given [uri] is resolved. ¿ t(
¿ t0   ¿ {ÑI¿ {ª}/// Return a [ParsedLibraryResult] for the library with the given [path].
///
/// The [path] must be absolute and normalized. ¿ {Ã¿ {‘   ¿ lÅ∫¿ œH/// Return a [ParsedLibraryResult] for the library with the given [uri]. ¿ Â¿ Í   ¿ Å*Üx¿ ÑDÇ€/// Return a [Future] that completes with a [ResolvedLibraryResult] for the
/// Dart library file with the given [path].  If the file cannot be analyzed,
/// the [Future] completes with an [InvalidResult].
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither.
///
/// Invocation of this method causes the analysis state to transition to
/// "analyzing" (if it is not in that state already), the driver will produce
/// the resolution result for it, which is consistent with the current file
/// state (including new states of the files previously reported using
/// [changeFile]), prior to the next time the analysis state transitions
/// to "idle". ¿ ÑW¿ Ñ_   ¿ á¶ÉÍ¿ ä/ÇR/// Return a [Future] that completes with a [ResolvedLibraryResult] for the
/// Dart library file with the given [uri].  If the file cannot be analyzed,
/// the [Future] completes with an [InvalidResult].
///
/// Invocation of this method causes the analysis state to transition to
/// "analyzing" (if it is not in that state already), the driver will produce
/// the resolution result for it, which is consistent with the current file
/// state (including new states of the files previously reported using
/// [changeFile]), prior to the next time the analysis state transitions
/// to "idle". ¿ äG¿ äL   ¿ ãîá5¿ èsÉù/// Return a [Future] that completes with a [SomeResolvedUnitResult] for the
/// Dart file with the given [path].  If the file cannot be analyzed,
/// the [Future] completes with an [InvalidResult].
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither.
///
/// If the driver has the cached analysis result for the file, it is returned.
/// If [sendCachedToStream] is `true`, then the result is also reported into
/// the [results] stream, just as if it were freshly computed.
///
/// Otherwise causes the analysis state to transition to "analyzing" (if it is
/// not in that state already), the driver will produce the analysis result for
/// it, which is consistent with the current file state (including new states
/// of the files previously reported using [changeFile]), prior to the next
/// time the analysis state transitions to "idle". ¿ è}¿ èÖ  ¿ èë¿ èó  ¿ è´¿ íÕÇ¨¿ ì]m/// Return a [Future] that completes with the [SomeUnitElementResult]
/// for the file with the given [path]. ¿ ìl¿ ìt   ¿ ï}Ñ¿ óÅv/// Return a [ParsedUnitResult] for the file with the given [path].
///
/// The [path] must be absolute and normalized.
///
/// The [path] can be any file - explicitly or implicitly analyzed, or neither.
///
/// The parsing is performed in the method itself, and the result is not
/// produced through the [results] stream (just because it is not a fully
/// resolved unit). ¿ ó)¿ ó1   ¿ ô†î-¿ ôπ   ¿ ô†¿ ô°¿ ≠—ÇÛ¿ ØÅ7/// Remove the file with the given [path] from the list of files to analyze.
///
/// The [path] must be absolute and normalized.
///
/// The results of analysis of the file might still be produced by the
/// [results] stream. The driver will try to stop producing these results,
/// but does not guarantee this. ¿ Ø'¿ Ø/   ¿ ∞»Å©¿ ∞Ò  ¿ ±¿ ±  ¿ ±&¿ ±4  ¿ ±?-¿ ±b   ¿ ≤uÅ<¿ ≤z  ¿ ≤õ¿ ≤©   ¿ ≥µÑ®¿ ≥∫    ¿ ∏aÅr¿ πéÅ/// There was an exception during a file analysis, we don't know why.
/// But it might have been caused by an inconsistency of files state, and
/// the library context state. Reset the library context, and hope that
/// we will solve the inconsistency while loading / building summaries.   ¿ π◊í◊¿ ªÌÅÍ/// Return the cached or newly computed analysis result of the file with the
/// given [path].
///
/// The [withUnit] flag control which result will be returned.
/// When `true`, [AnalysisResult.unitResult] will be set.
/// Otherwise [AnalysisResult.errorsResult] will be set.
///
/// Return [AnalysisResult._UNCHANGED] if [skipIfSameSignature] is `true` and
/// the resolved signature of the file in its library is the same as the one
/// that was the most recently produced to the client. ¿ º¿ º  ¿ º¿ º'  ¿ º0 ¿ º6  ¿ ºK¿ Ã≤ÄÀ¿ ÃÀ  ¿ Ã‡¿ ÃÒ   ¿ ÕÅÄ∑¿ Õ°  ¿ ÕØ¿ Õ∑   ¿ Œ<á¿ ŒºY/// Return the newly computed resolution result of the library with the
/// given [path]. ¿ ŒŸ¿ ŒÍ   ¿ ’GÉû¿ ’b  ¿ ’v¿ ’~   ¿ ÿÈÅ∞¿ ÿ˙  ¿ Ÿ¿ Ÿ,  ¿ Ÿ5#¿ ŸS   ¿ ⁄ùÑú¿ €EÄö/// Creates new [FileSystemState] and [FileTracker] objects.
///
/// This is used both on initial construction and whenever the configuration
/// changes.   ¿ ﬂ=Ç¿ ﬂT  ¿ ﬂr¿ ﬂÜ  ¿ ﬂè&¿ ﬂ¨   ¿ ·`Å¿ ·˚Äë/// If this has not been done yet, schedule discovery of all files that are
/// potentially available, so that they are included in [knownFiles].   ¿ ‚eÑó¿ ÂQÇÃ/// When we look at a part that has a `part of name;` directive, we
/// usually don't know the library (in contrast to `part of uri;`).
/// So, we have no choice than to resolve this part as its own library.
///
/// But parts of `dart:xyz` libraries are special. The reason is that
/// `dart:core` is always implicitly imported. So, when we start building
/// the library cycle of such "part as a library", we discover `dart:core`,
/// and see that it contains our part. So, we don't add it as a library on
/// its own. But have already committed that it is a library. This causes
/// an exception in `LinkedElementFactory`.
///
/// The current workaround for this is to discover `dart:core` before any
/// analysis.   ¿ Á Äÿ¿ Á    ¿ Á‹l¿ Á·    ¿ ËLÅ ¿ ËQ    ¿ ÈPÅΩ¿ ÈU    ¿ ÎÄ¿ Î    ¿ ÏÑ˚¿ Ïås/// Load the [AnalysisResult] for the given [file] from the [bytes]. Set
/// optional [content] and [resolvedUnit]. ¿ Ï≠¿ Ï∏  ¿ Ï¡¿ Ï…  ¿ Ï◊¿ Ï‚  ¿ ÏÓ¿ Ï˜  ¿ Ì¿ Ì  ¿ Ì&¿ Ì<   ¿ ÒÅÀ¿ ÒY>/// Return [AnalysisError]s for the given [serialized] errors. ¿ Òy¿ ÒÑ  ¿ Òâ(¿ Ò®   ¿ Ú”Äû¿ Û$G/// Return the key to store fully resolved results for the [signature]. ¿ Û8¿ Û@   ¿ ÛuÇ¿ ÙÄå/// Return the signature that identifies fully resolved results for the [file]
/// in the [library], e.g. element model, errors, index, etc. ¿ Ù'¿ Ù8  ¿ Ù@¿ ÙK   ¿ ıêÅ¿ ıï  ¿ ı¶¿ ıÆ   ¿ ˆÆb¿ ˆ≥  ¿ ˆ√¿ ˆÀ   ¿ ˜ÄÀ¿ ˜  ¿ ˜4¿ ˜E   ¿ ˜„ÄÛ¿ ˜    ¿ ¯⁄Éé¿ ˘hz/// We detected that one of the required `dart` libraries is missing.
/// Return the empty analysis result with the error. ¿ ˘å¿ ˘ó  ¿ ˘ú¿ ˘§   ¿ ¸lÅ¿ ¸q  ¿ ¸|¿ ¸á   ¿ ˝~Çá¿ ˝É  ¿ ˝¨¿ ˝π  ¿ ˝—¿ ˝Ÿ   ¿ 	Ö?¿   ¿ ¿ '  ¿ ,¿ 4  ¿ >¿ J   ¿LÜ‹¿u  ¿ê$¿Æ   ¿,Ö€¿4  ¿K¿S  ¿X¿i  ¿w¿  ¿â¿ï   ¿Å¿éy/// The driver supports only absolute paths, this method is used to validate
/// any input paths to prevent errors later. ¿¶¿Æ   ¿+Å«¿üj/// Given the list of [errors] for the [file], update the [file]'s
/// [FileState.hasErrorOrWarning] flag. ¿√¿Œ  ¿”¿Ë    ¿ˆÖc¿Å/// A generic schedulable interface via the AnalysisDriverScheduler. Currently
/// only implemented by [AnalysisDriver] and the angular plugin, at least as
/// a temporary measure until the official plugin API is ready (and a different
/// scheduler is used)   ¿"T¿d6/// Return `true` if the driver has a file to analyze.   ¿zÅ°¿ÒÅd/// Set the list of files that the driver should try to analyze sooner.
///
/// Every path in the list must be absolute and normalized.
///
/// The driver will produce the results through the [results] stream. The
/// exact order in which results are produced is not defined, neither
/// between priority files, nor between priority and non-priority files. ¿ˇ¿   ¿l¿~A/// Return the priority of work that the driver needs to perform.   ¿èÅ¿àÄÁ/// Add the file with the given [path] to the set of files that are explicitly
/// being analyzed.
///
/// The [path] must be absolute and normalized.
///
/// The results of analysis are eventually produced by the [results] stream. ¿ê¿ò   ¿°[¿Ò@/// Notify the driver that the client is going to stop using it.   ¿ W¿I9/// Perform a single chunk of work and produce [results].    ¿øö¿LÄÜ/// Instances of this class schedule work in multiple [AnalysisDriver]s so that
/// work with the highest priority is performed first. ¿"< ¿"¿"2 ¿"3¿"9  ¿"B¿"H   	¿hÅZ¿†Å/// Time interval in milliseconds before pumping the event queue.
///
/// Relinquishing execution flow and running the event loop after every task
/// has too much overhead. Instead we use a fixed length of time, so we can
/// spend less time overall and still respond quickly enough.¿¡¿«Ç9¿€ÅÚ/// Event queue pumping is required to allow IO and other asynchronous data
/// processing while analysis is active. For example Analysis Server needs to
/// be able to process `updateContent` or `setPriorityFiles` requests while
/// background analysis is in progress.
///
/// The number of pumpings is arbitrary, might be changed if we see that
/// analysis or other data processing tasks are starving. Ideally we would
/// need to run all asynchronous operations using a single global scheduler.¿˝¿ ¿   ¿ &n¿ áI/// The object used to watch as analysis drivers are created and deleted. ¿ ô/¿ ª ¿ ∆¿ «¿ Ã"¿ ⁄ ¿ Â¿ Ï¿ Ì¿ Ú4¿! ¿!¿!$¿!%¿!+¿!0 ¿!;¿!EÄ—¿"Ä®/// The optional worker that is invoked when its work priority is higher
/// than work priorities in drivers.
///
/// Don't use outside of Analyzer and Analysis Server. ¿"[c¿"ú5/// Return `true` if we are currently analyzing code.   ¿"¬z¿#</// Return the stream that produces [AnalysisStatus] events.   ¿#@ÄÚ¿#ä>/// Return `true` if there is a driver with a file to analyze.   ¿$6Å¿$}?/// Add the given [driver] and schedule it to perform its work. ¿$Å¿$ò   ¿%OÅF¿%≥Z/// Notify that there is a change to the [driver], it might need to
/// perform some work. ¿%∫¿%“   ¿&ôÅ)¿'k/// Remove the given [driver] from the scheduler, so that it will not be
/// asked to perform any new work. ¿'¿',   ¿'∆Å¿(@p/// Start the scheduler, so that any [AnalysisDriver] created before or
/// after will be asked to perform work.   ¿(œÅﬁ¿)¸Å/// Usually we transition status to analyzing only if there are files to
/// analyze. However when used in the server, there are rare cases when
/// analysis roots don't have any Dart files, but for consistency we still
/// want to get status to transition to analysis, and back to idle.   ¿*±ÄÔ¿+rÄ´/// Return a future that will be completed the next time the status is idle.
///
/// If the status is currently idle, the returned future will be signaled
/// immediately.   ¿+§â¿,]/// Run infinitely analysis cycle, selecting the drivers with the highest
/// priority first.   ¿4øÅ¿51_/// Returns a [Future] that completes after performing [times] pumpings of
/// the event queue. ¿5A	¿5F    ¿5⁄Çs¿5‡   ¿5˚'¿6 ¿6¿6 ¿6!¿6'[¿62 ¿6C¿6Y¿6Å¿6q¿6_¿6s¿6á ¿6°  ¿6¨¿6∞ ¿6…¿6œ3¿6ﬂ    ¿7Ä‰¿7    ¿7Ó]¿8      ¿8OÜî¿:9Å„/// The result of analyzing of a single file.
///
/// These results are self-consistent, i.e. the file content, line info, the
/// resolved unit correspond to each other. All referenced elements, even
/// external ones, are also self-consistent. But none of the results is
/// guaranteed to be consistent with the state of the files.
///
/// Every result is independent, and is not guaranteed to be consistent with
/// any previously returned result, even inside of the same library. ¿<—Äµ¿<ﬂ¿<‡¿<Ê ¿<Ó¿<Ù  ¿<ˇ¿=  ¿=¿=+  	¿=K¿=9¿=M¿=g¿=\¿=i¿=~¿=w¿=Ä¿=äÄ†¿=ò¿=ô¿=® ¿=©¿=Ø  ¿=‘¿=¬¿=÷¿=Ò¿=‰¿=Û¿>¿>¿>¿>#¿>¿>%¿>.Ä≥¿><¿>=¿>A ¿>I¿>O  ¿>Z¿>`  ¿>k¿>Ñ  	¿>§¿>í¿>¶¿>¬¿>µ¿>ƒ¿>Ÿ¿>“¿>€¿:LÄ«¿;	Ä©/// The signature of the result based on the content of the file, and the
/// transitive closure of files imported and exported by the library of
/// the requested file. ¿;¿;#  ¿;9Äú¿;…s/// Is not `null` if this result is a result with errors.
/// Otherwise is `null`, and usually [unitResult] is set. ¿;⁄Ä´¿<{~/// Is not `null` if this result is a result with a resolved unit.
/// Otherwise is `null`, and usually [errorsResult] is set. ¿<äB¿<∆/// The index of the unit.    ¿>ÂÅÒ¿?ÅÄå/// An object that watches for the creation and removal of analysis drivers.
///
/// Clients may not extend, implement or mix-in this class.    ¿?ìÄÀ¿@;Äû/// The context manager has just added the given analysis [driver]. This method
/// must be called before the driver has been allowed to perform any analysis. ¿@G¿@W   ¿@br¿@ØE/// The context manager has just removed the given analysis [driver]. ¿@Ω¿@Õ    ¿@ÿà˙¿@ﬁ     ¿@Ö¿A  ¿A¿A  ¿A%¿A>   ¿F Ç—¿F&  ¿F-¿F<   ¿H’Ä˚¿I]q/// Return the lint code with the given [errorName], or `null` if there is no
/// lint registered with that name. ¿Is¿I{    ¿I‘Ég¿J,/// Exception that happened during analysis. ¿L©Äê ¿L©¿L∏ ¿Lø¿LŒ  ¿L€¿LÍ  ¿L˝¿M  ¿M¿M)   ¿JÄÜ¿Jôj/// The path of the library being analyzed when the [exception] happened.
///
/// Absolute and normalized. ¿J¶X¿J-/// The content of the library and its parts. ¿Kd¿K^B/// The exception during analysis of the file with the [filePath]. ¿KlÅ8¿LöÅ/// If the exception happened during a file analysis, and the context in which
/// the exception happened was stored, this field is the key of the context
/// in the byte store. May be `null` if the context is unknown, the maximum
/// number of context to store was reached, etc.    ¿M=Çƒ¿Mr./// Container that keeps track of file owners.  ¿MÅÄÑ¿MˆQ/// Key: the absolute file URI.
/// Value: the driver to which the file is added.¿N¿N¿N
Ä‹¿N◊Äß/// Key: the absolute file URI.
/// Value: a driver in which this file is available via dependencies.
/// This map does not contain any files that are in [addedFiles].¿N‰¿NÂ ¿NÎ¿N  ¿N˘¿N˛  ¿O¿O   ¿OnÄë¿Os  ¿O|¿OÅ  ¿OÖ¿Oï    ¿PÅ ¿P;(/// Worker in [AnalysisDriverScheduler].   ¿POm¿PØB/// Return the priority of work that this worker needs to perform.   ¿P¿A¿PÛ#/// Perform a single chunk of work.    ¿Qâˇ¿Qi]/// Task that discovers all files that are available to the driver, and makes
/// them known. ¿Ri) ¿Ri¿RÑ ¿RÖ¿Rã   ¿Qâ&¿Qö ¿QÆ¿Q¥¿Q…  ¿Q‘3¿QÍ ¿Qˆ¿Qˇ¿R¿R ¿R¿R¿R ¿R  ¿R1¿RD ¿RL¿RM¿RS¿RW ¿Rc¿Rñ.¿Rü    ¿R»Ü|¿SãÄ∑/// Perform the next piece of work, and set [isCompleted] to `true` to
/// indicate that the task is done, or keeps it `false` to indicate that the
/// task should continue to be run.   ¿YHÅ∫¿YM  ¿Ye¿Ym    ¿[Å¿¿[@3/// Information about an exception and its context. ¿\CB ¿\C¿\R ¿\S¿\Y  ¿\c¿\i  ¿\t¿\z   ¿[T¿[a  ¿[n¿[  ¿[éÄ∞¿\4Äì/// The key under which the context of the exception was stored, or `null`
/// if unknown, the maximum number of context to store was reached, etc.  ¿\â;¿\ú   ¿\â¿\ä ¿\»Äæ¿\Œ  ¿]" ¿]¿] ¿]	¿]$  ¿])	¿]/   ¿\ﬁ¿\Î  ¿\Û¿]	   ¿]8L¿]K   ¿]8¿]9 ¿]∂á7¿^9|/// Task that computes the list of files that were added to the driver and
/// declare a class member with the given [name]. ¿_ó: ¿_ó¿_∏ ¿_π¿_ø  ¿_∆	¿_Ã   ¿^_&¿^p ¿^Ñ¿^ä¿^ü  ¿^©¿^∂  ¿^æC¿^‹ 	¿^Ë¿^Ò¿^˛¿^Ú¿^ˆ¿^˝¿^˜¿^ˇ¿_ ¿_-¿_ ¿_1¿_2¿_)¿_0¿_*¿_7+¿_I ¿_`¿_a¿_X¿__¿_Y¿_f,¿_y ¿_ê¿_ë¿_à¿_è¿_â ¿_’Ö¿a÷ÅÎ/// Perform work for a fixed length of time, and complete the [completer] to
/// either return `true` to indicate that the task is done, or return `false`
/// to indicate that the task should continue to be run.
///
/// Each invocation of an asynchronous method has overhead, which looks as
/// `_SyncCompleter.complete` invocation, we see as much as 62% in some
/// scenarios. Instead we use a fixed length of time, so we can spend less time
/// overall and keep quick enough response time.    ¿dÔáü¿eôÄ£/// Task that computes the list of files that were added to the driver and
/// have at least one reference to an identifier [name] defined outside of the
/// file. ¿g2 ¿g¿g( ¿g)¿g/  ¿g6	¿g<   	¿e∑"¿e» ¿e÷¿e›&¿eÓ ¿f¿f¿f  ¿f'¿f4  ¿f<C¿fZ 	¿ff¿fo¿f|¿fp¿ft¿f{¿fu¿f}¿f~¿fÑ¿fà ¿fî¿fï¿fö¿f´  ¿fª¿fø ¿f”¿f‘¿f⁄0¿fÌ ¿g¿g	¿g ¿g¿g ¿gEÖG¿iFÅÎ/// Perform work for a fixed length of time, and complete the [completer] to
/// either return `true` to indicate that the task is done, or return `false`
/// to indicate that the task should continue to be run.
///
/// Each invocation of an asynchronous method has overhead, which looks as
/// `_SyncCompleter.complete` invocation, we see as much as 62% in some
/// scenarios. Instead we use a fixed length of time, so we can spend less time
/// overall and keep quick enough response time.    ¿lêÅC¿lñ  ¿m\u ¿m\¿mx ¿m¿mé  ¿mó¿m¶  ¿m±¿m¿   ¿l∑¿lƒ  ¿lÃ¿l÷  ¿l‡*¿lˇ  ¿mI¿m@ ¿mL¿mU¿mV    ¿[Åb¿Äµ/// Priorities of [AnalysisDriver] work. The farther a priority to the beginning
/// of the list, the earlier the corresponding [AnalysisDriver] should be asked
/// to perform work.  	¿1¿1  ¿<¿<  ¿G¿G  ¿\¿\  ¿t¿t  ¿Ü¿Ü  ¿ñ¿ñ  ¿¢¿¢  ¿±
¿±     ¿]à,¿]ç   ¿]ü¿]ü  ¿]§¿]§  ¿]¨¿]¨               äÆ MÄõÄ◊ÄÿÄÌÅÅÅUÅcÅ§Å⁄ÇÇ3ÇbÇñÇŒÉÉ@ÉêÉ◊ÑÑYÑòÑ–ÖÖ\ÖûÖ„ÜÜVÜêÜ…ááNááá¡áÒà)à]à≠à‚ââXâãâªâ˝ä;ävä©äÏã.ãyã±ã≤ãÏãåAåèå‹ç*çyç…ééUéãéèé‹èèè@èDèìèƒè»êê^ê´ê„êÁë9ëäëøë√íí]íØí≥íˆì.ì~ì•ì¶ìÚî:îlîmî∫î“î˛îˇïBïbïcïóï√ïƒï˚ññ6ñTñUñóñùñ“óóóTó¢ó∑óÂóÊò/òPò|ò}ò∆ò›ôôôIôJôvô§ô•ôÏöö	öUölöíöìö√öƒõõ7õ8õÉõ∏õÿõŸúú0ú1úpúüú†úÊùùùWùÜùáùÀù¸ù˝û>ûcûdûÆû‚û„ü-üEünüoüπü˛üˇ†G†É†“†”°°`°~°≈°∆°Ú¢A¢B¢è¢Ÿ¢ˇ£;£<£É£“£”§§O§P§ó§”•"•#•l•ß•∆¶¶¶T¶ï¶∫¶Ù¶ıßCßëß∆ß«ßˆ®.®/®|®§®•®Ú©,©-©X©ó©ò©∆™™ ™!™S™î™ø™¿™Î´´	´3´4´b´c´Ñ´Ö´≤´”´‘¨¨¨¨X¨{¨|¨∏¨ﬂ¨‡≠)≠s≠ê≠∏≠πÆÆ7ÆYÆZÆtÆuÆ¶Æ¨Æ˚ØEØXØàØ¨Ø‹Ø˛∞(∞Z∞z∞ó∞Ø∞ƒ∞ﬁ±±0±`±~±ß±—±¯≤≤+≤Y≤y≤ï≤„≥.≥N≥é≥∫≥‘≥Ú¥¥J¥ê¥‘¥¯µµTµUµûµüµπµ”µÔµÛµÙ∂@∂y∂z∂∂∂Ò∂Ú∑∑H∑Ç∑Ü∑á∑¡∏
∏∏0∏[∏\∏h∏á∏´∏”∏˘ππ#π$πhπiπ∏∫∫;∫t∫u∫µ∫€ª
ª4ªfª}ªöªÕªˆº"ºGºuºôº∆ºÁºÓºÚºÛΩ3ΩvΩwΩ∞Ω˜Ω¯æEæëæíæûæ–æÍæ˚ø&øQømøóø¥ø∏øπ¿ @¿ @C¿ @D¿ @è¿ @ï¿ @’¿ @€¿ A'¿ Av¿ A«¿ A˜¿ A˝¿ B+¿ BW¿ Bù¿ B£¿ BÀ¿ C¿ C¿ C^¿ C®¿ CÙ¿ DD¿ D~¿ DÑ¿ D–¿ E¿ E¿ EU¿ E†¿ EÃ¿ EÕ¿ E˝¿ F¿ F¿ Fm¿ FÑ¿ Fπ¿ F∫¿ F∆¿ FÚ¿ G¿ GJ¿ GP¿ GÑ¿ G¥¿ G∫¿ G‡¿ H¿ H¿ HA¿ Hr¿ Hx¿ Hß¿ H‹¿ I¿ I¿ IG¿ Is¿ I§¿ I™¿ I÷¿ J¿ J¿ J8¿ Ji¿ Jo¿ J†¿ J—¿ J◊¿ J¸¿ K(¿ KX¿ Kä¿ Kî¿ Kú¿ K¢¿ KÃ¿ K˘¿ Kˇ¿ L'¿ LY¿ L_¿ Lé¿ L¬¿ L»¿ Lˆ¿ M0¿ M6¿ Mc¿ Mö¿ M†¿ M»¿ Mı¿ M˚¿ N/¿ N\¿ Nb¿ Nç¿ Në¿ Ní¿ Nû¿ Nº¿ Nﬂ¿ O¿ O¿ O¿ OV¿ Ov¿ Oõ¿ O∫¿ OÍ¿ OÛ¿ P¿ P¿ P¿ P¿ Pl¿ P´¿ P±¿ P˙¿ QI¿ Qï¿ Q·¿ R,¿ Ru¿ R®¿ R“¿ S¿ S?¿ Ss¿ Sí¿ Sü¿ Sﬁ¿ Sˇ¿ T/¿ T5¿ T9¿ T:¿ TÜ¿ Tπ¿ Tø¿ TÒ¿ U¿ U:¿ Ub¿ Uo¿ U©¿ U™¿ U—¿ UÚ¿ U˘¿ V2¿ V3¿ VT¿ Vy¿ V¥¿ VÁ¿ W3¿ Wm¿ Wn¿ Wó¿ W©¿ W“¿ W˛¿ X¿ X ¿ X(¿ X.¿ X/¿ Xd¿ Xe¿ Xç¿ X«¿ X‰¿ XÎ¿ XÔ¿ X¿ Y<¿ Yã¿ Yë¿ Y√¿ Y…¿ Z¿ Z!¿ Zo¿ Zº¿ [¿ [%¿ [+¿ [u¿ [º¿ \	¿ \(¿ \I¿ \l¿ \é¿ \ú¿ \¢¿ \„¿ ]¿ ](¿ ]G¿ ]z¿ ]É¿ ]¢¿ ]®¿ ]¨¿ ]≠¿ ]˚¿ ^G¿ ^ñ¿ ^Ê¿ ^˙¿ _¿ _9¿ _U¿ _Y¿ _Z¿ _¶¿ _ˆ¿ ` ¿ `O¿ `É¿ `†¿ `¶¿ `≈¿ `‚¿ a¿ a ¿ a!¿ a-¿ aO¿ ax¿ aé¿ a≥¿ a¥¿ a‹¿ b¿ bE¿ bÇ¿ bä¿ bê¿ b±¿ b≤¿ bÍ¿ c¿ cT¿ c\¿ cb¿ c¿ cÄ¿ c√¿ c¿ d-¿ d5¿ d;¿ dc¿ dd¿ d¢¿ dœ¿ e¿ e¿ e¿ e=¿ e>¿ ey¿ eπ¿ eø¿ eÍ¿ eÎ¿ f¿ f%¿ f)¿ f*¿ fx¿ f»¿ fÏ¿ fÚ¿ g$¿ g*¿ g|¿ g±¿ g‘¿ g˜¿ g˚¿ g¸¿ hH¿ hj¿ hp¿ h¢¿ h®¿ hÙ¿ i8¿ ir¿ iî¿ iØ¿ iÃ¿ i’¿ i€¿ i‹¿ i˛¿ j¿ j7¿ j@¿ jF¿ jG¿ j\¿ jw¿ j†¿ j©¿ jØ¿ j∞¿ j„¿ k)¿ kF¿ kc¿ kg¿ kh¿ k±¿ k‰¿ l*¿ lI¿ lá¿ l¥¿ l—¿ lÛ¿ l˜¿ l¯¿ mA¿ ml¿ m™¿ m…¿ mˇ¿ n$¿ nA¿ nc¿ ng¿ nh¿ nØ¿ nµ¿ nÁ¿ o¿ o5¿ oW¿ o]¿ o^¿ oí¿ o≠¿ oÃ¿ oﬁ¿ oÛ¿ p¿ pK¿ pz¿ p£¿ p™¿ pÆ¿ pØ¿ p˝¿ qH¿ qX¿ qì¿ q∂¿ qŒ¿ r¿ r¿ r-¿ rJ¿ rP¿ rã¿ r–¿ rÌ¿ s
¿ s¿ s¿ s`¿ sÆ¿ sı¿ t<¿ tb¿ tc¿ tî¿ tª¿ u¿ u?¿ uh¿ uì¿ u≈¿ uÕ¿ u”¿ u‘¿ v¿ v¿ v,¿ vU¿ vÄ¿ v†¿ v«¿ v˙¿ w.¿ wY¿ wÖ¿ wñ¿ wŸ¿ w„¿ w‰¿ x¿ xM¿ xî¿ xû¿ xü¿ xÂ¿ y¿ yF¿ y|¿ yµ¿ yø¿ y¿¿ yﬁ¿ z	¿ zA¿ za¿ z£¿ z‡¿ {¿ {¿ {¿ {¿ {i¿ {o¿ {°¿ {€¿ {˝¿ |¿ |%¿ |&¿ |H¿ |k¿ |q¿ |r¿ |¢¿ |æ¿ |·¿ }¿ }@¿ }g¿ }è¿ }ú¿ }€¿ }·¿ }‚¿ ~¿ ~/¿ ~S¿ ~É¿ ~∞¿ ~€¿ ~„¿  ¿ ¿ ¿ +¿ J¿ ^¿ e¿ i¿ j¿ µ¿ ¿ Ä¿ Ä4¿ ÄE¿ Än¿ Äô¿ Ä≈¿ Ä¿ Å¿ Å#¿ Å'¿ Å(¿ Åv¿ Å∆¿ Å¸¿ Ç¿ Ç4¿ Ç:¿ Çå¿ Çí¿ Ç›¿ É-¿ É{¿ Éƒ¿ Ñ¿ Ñ ¿ Ñl¿ Ñé¿ Ñ∞¿ Ñ∂¿ Ñ∑¿ ÑŸ¿ Ñ¸¿ Ö¿ Ö¿ Ö¿ Ö3¿ Ö\¿ Öe¿ Ök¿ Öl¿ Öú¿ Ö∏¿ Ö€¿ Ü¿ Üa¿ ÜÄ¿ Üü¿ ÜŒ¿ Ü˛¿ á%¿ áM¿ áZ¿ áô¿ áü¿ á£¿ á§¿ áÚ¿ àA¿ àw¿ à}¿ à»¿ â¿ âf¿ âØ¿ â˙¿ ä¿ äX¿ äÜ¿ äú¿ ä≠¿ ä÷¿ ã¿ ã/¿ ãZ¿ ãá¿ ãç¿ ãë¿ ãí¿ ã·¿ å)¿ å_¿ åe¿ åó¿ åù¿ åÔ¿ åı¿ çF¿ çï¿ ç÷¿ ç‹¿ é-¿ é¿ éœ¿ è¿ èR¿ èä¿ èµ¿ è◊¿ èÚ¿ ê¿ ê¿ ê¿ ê¿ êA¿ ê\¿ êz¿ êÉ¿ êâ¿ êä¿ ê´¿ ê±¿ êÎ¿ ë¿ ë)¿ ëR¿ ë\¿ ëÅ¿ ëâ¿ ëè¿ ëê¿ ë•¿ ë¿¿ ëÈ¿ ëÚ¿ ë¯¿ ë˘¿ í¿ íL¿ íå¿ í©¿ í∆¿ í ¿ íÀ¿ ì¿ ì=¿ ì{¿ ìù¿ ì∏¿ ì’¿ ìﬁ¿ ì‰¿ ìÂ¿ î¿ î"¿ î@¿ îI¿ îO¿ îP¿ îe¿ îÄ¿ î©¿ î≤¿ î∏¿ îπ¿ îÒ¿ ï<¿ ïY¿ ïv¿ ïz¿ ï{¿ ï¡¿ ï«¿ ï˘¿ ïˇ¿ ñQ¿ ñW¿ ñ¢¿ ñÓ¿ ó¿ ó8¿ óZ¿ ó|¿ óÇ¿ óÉ¿ ó∑¿ ó˜¿ ò(¿ òI¿ òh¿ ò¿ òî¿ ò±¿ ò–¿ ô	¿ ô8¿ ôa¿ ôs¿ ôí¿ ôô¿ ôù¿ ôû¿ ô™¿ ôœ¿ ôË¿ ö¿ ö¿ ö7¿ öy¿ öÖ¿ ö¬¿ öÓ¿ õ¿ õU¿ õï¿ õ√¿ õÀ¿ õŸ¿ õﬂ¿ õ‡¿ ú¿ ú'¿ úV¿ úé¿ ú∏¿ úƒ¿ ù¿ ù>¿ ùl¿ ùñ¿ ù†¿ ùÀ¿ ùÛ¿ û*¿ ûX¿ ûí¿ ûú¿ û ¿ û“¿ û‡¿ ûÊ¿ ûÁ¿ ü¿ ü5¿ ük¿ üw¿ ü¥¿ ü˙¿ † ¿ †*¿ †R¿ †ò¿ †“¿ †‹¿ °
¿ °¿ ° ¿ °&¿ °'¿ °H¿ °t¿ °ß¿ °„¿ ¢¿ ¢ ¿ ¢)¿ ¢S¿ ¢w¿ ¢¿ ¢ç¿ ¢ì¿ ¢î¿ ¢µ¿ ¢‡¿ £¿ £D¿ £Ü¿ £©¿ £±¿ £ø¿ £≈¿ £∆¿ £Ì¿ §¿ §Y¿ §ö¿ §–¿ §˙¿ •¿ •&¿ •4¿ •:¿ •;¿ •\¿ •ã¿ •¿¿ •Ó¿ •¸¿ ¶¿ ¶¿ ¶)¿ ¶]¿ ¶å¿ ¶ª¿ ¶ﬂ¿ ¶Û¿ ß'¿ ß/¿ ß=¿ ßC¿ ßD¿ ßm¿ ßô¿ ß›¿ ®¿ ®¿ ®A¿ ®I¿ ®W¿ ®]¿ ®^¿ ®~¿ ®£¿ ®œ¿ ®ˇ¿ ©¿ ©\¿ ©ì¿ ©ø¿ ©˙¿ ™,¿ ™B¿ ™r¿ ™~¿ ™ê¿ ™ö¿ ™¢¿ ™®¿ ™©¿ ™»¿ ™¿ ´!¿ ´-¿ ´e¿ ´û¿ ´∆¿ ¨¿ ¨T¿ ¨e¿ ¨ú¿ ¨Ÿ¿ ¨„¿ ≠¿ ≠B¿ ≠p¿ ≠Ç¿ ≠Æ¿ ≠∂¿ ≠ƒ¿ ≠ ¿ ≠Œ¿ ≠œ¿ Æ¿ Æ$¿ ÆV¿ Æ\¿ Æ•¿ ÆÚ¿ Ø¿ Ø6¿ ØY¿ Ø{¿ Øâ¿ Øè¿ Ø–¿ Ø¸¿ ∞¿ ∞A¿ ∞`¿ ∞ì¿ ∞ú¿ ∞ª¿ ∞¡¿ ∞≈¿ ∞∆¿ ±¿ ±"¿ ±;¿ ±n¿ ±{¿ ±≠¿ ±ø¿ ±’¿ ±ı¿ ±¸¿ ≤,¿ ≤I¿ ≤n¿ ≤r¿ ≤s¿ ≤≤¿ ≤Î¿ ≥¿ ≥¿ ≥;¿ ≥j¿ ≥à¿ ≥®¿ ≥Æ¿ ≥≤¿ ≥≥¿ ≥◊¿ ¥¿ ¥3¿ ¥U¿ ¥õ¿ ¥º¿ ¥ﬁ¿ µ¿ µ¿ µ:¿ µc¿ µt¿ µô¿ µ¬¿ ∂¿ ∂R¿ ∂s¿ ∂Ñ¿ ∂å¿ ∂í¿ ∂≥¿ ∂¥¿ ∂˘¿ ∑2¿ ∑3¿ ∑g¿ ∑¶¿ ∑”¿ ∑˝¿ ∏¿ ∏A¿ ∏L¿ ∏T¿ ∏Z¿ ∏^¿ ∏_¿ ∏ß¿ ∏Û¿ π=¿ πá¿ πµ¿ π–¿ π‘¿ π’¿ ∫$¿ ∫8¿ ∫>¿ ∫¿ ∫ª¿ ∫ˆ¿ ∫¸¿ ªL¿ ªõ¿ ª‘¿ º¿ º[¿ ºè¿ ºê¿ º‘¿ º¿ Ω$¿ Ω%¿ ΩK¿ Ωå¿ ΩΩ¿ Ωæ¿ æ¿ æ-¿ æF¿ æ~¿ æ∏¿ æ¿¿ æ∆¿ æ«¿ ø¿ ø*¿ øQ¿ øl¿ ø∞¿ ø∏¿ øæ¿ øø¿ ¿¿ ¿P¿ ¿x¿ ¿Ñ¿ ¿∞¿ ¿±¿ ¿ﬂ¿ ¡!¿ ¡+¿ ¡,¿ ¡[¿ ¡û¿ ¡®¿ ¡©¿ ¡Ã¿ ¡Ó¿ ¬)¿ ¬4¿ ¬5¿ ¬\¿ ¬é¿ ¬´¿ ¬Ù¿ √@¿ √S¿ √{¿ √ü¿ √¥¿ √µ¿ ƒ¿ ƒ¿ ƒ)¿ ƒc¿ ƒç¿ ƒ∑¿ ƒ∏¿ ƒ‹¿ ≈¿ ≈9¿ ≈:¿ ≈y¿ ≈≠¿ ≈ﬂ¿ ≈¯¿ ∆¿ ∆*¿ ∆+¿ ∆c¿ ∆¿ ∆£¿ ∆∞¿ ∆€¿ ∆‹¿ «¿ «C¿ «O¿ «P¿ «ü¿ «ﬁ¿ »¿ »¿ »S¿ »T¿ »v¿ »í¿ »ﬁ¿ »Û¿ …!¿ …<¿ …e¿ …á¿ …¥¿ …«¿ …ﬁ¿ …Ô¿ …˝¿  	¿  ¿  ¿  =¿  x¿  ù¿  ÷¿  ¯¿ À¿ À?¿ ÀI¿ ÀJ¿ Ày¿ À≥¿ À ¿ ÀÚ¿ Ã¿ ÃY¿ Ãõ¿ Ã£¿ Ã´¿ ÃØ¿ Ã∞¿ Ã‹¿ Ãˆ¿ Õ¿ ÕQ¿ Õz¿ Õ~¿ Õ¿ Õƒ¿ Œ¿ Œ5¿ Œ9¿ Œ:¿ ŒÑ¿ Œò¿ Œ’¿ ŒÚ¿ Œ˛¿ œ1¿ œK¿ œ`¿ œf¿ œg¿ œã¿ œ‘¿ œ˛¿ –¿ –?¿ –x¿ –Å¿ –Ç¿ –´¿ –·¿ —¿ —O¿ —ü¿ —∂¿ —‚¿ “
¿ “ ¿ “R¿ “S¿ “†¿ “Œ¿ “¯¿ ”.¿ ”H¿ ”j¿ ”u¿ ”û¿ ”«¿ ‘¿ ‘¿ ‘¿ ‘¿ ‘D¿ ‘e¿ ‘ö¿ ‘∏¿ ‘¡¿ ‘¬¿ ‘È¿ ’¿ ’"¿ ’#¿ ’8¿ ’@¿ ’D¿ ’E¿ ’ã¿ ’ø¿ ’¿¿ ÷¿ ÷ ¿ ÷T¿ ÷U¿ ÷û¿ ÷∆¿ ÷Á¿ ◊¿ ◊@¿ ◊I¿ ◊è¿ ◊≥¿ ◊‘¿ ◊Ë¿ ◊ˇ¿ ÿ ¿ ÿ[¿ ÿå¿ ÿ∑¿ ÿ—¿ ÿ⁄¿ ÿ‚¿ ÿÊ¿ ÿÁ¿ Ÿ¿ Ÿ1¿ ŸZ¿ Ÿa¿ Ÿ~¿ Ÿù¿ Ÿ¥¿ Ÿ…¿ ŸË¿ ⁄!¿ ⁄P¿ ⁄y¿ ⁄è¿ ⁄ñ¿ ⁄ö¿ ⁄õ¿ ⁄⁄¿ ⁄‡¿ €/¿ €>¿ €\¿ €m¿ €n¿ €°¿ €≈¿ €¿ ‹¿ ‹M¿ ‹u¿ ‹´¿ ‹ı¿ ‹¸¿ ‹˝¿ ›¿ ›,¿ ›>¿ ›W¿ ›c¿ ›x¿ ›¶¿ ›ø¿ ›◊¿ ›Ô¿ ﬁ	¿ ﬁ:¿ ﬁg¿ ﬁÇ¿ ﬁ£¿ ﬁ¿¿ ﬁÊ¿ ﬁÌ¿ ﬂ6¿ ﬂ:¿ ﬂ;¿ ﬂn¿ ﬂã¿ ﬂ∑¿ ﬂæ¿ ﬂ·¿ ‡ ¿ ‡¿ ‡,¿ ‡G¿ ‡d¿ ‡É¿ ‡º¿ ‡Î¿ ·¿ ·1¿ ·R¿ ·Y¿ ·]¿ ·^¿ ·¨¿ ·Ù¿ ‚¿ ‚^¿ ‚b¿ ‚c¿ ‚©¿ ‚Ô¿ „9¿ „?¿ „á¿ „”¿ ‰!¿ ‰n¿ ‰∫¿ ‰Ë¿ ‰Ó¿ Â:¿ ÂJ¿ Âg¿ Ââ¿ Âó¿ Âù¿ Â¿¿ Â¡¿ Âˆ¿ Ê:¿ Êm¿ Êû¿ Ê√¿ ÊÎ¿ ÊÛ¿ Ê˘¿ Ê˝¿ Ê˛¿ Á¿ Á?¿ ÁM¿ ÁS¿ Áw¿ Áx¿ Á™¿ Áœ¿ Á’¿ ÁŸ¿ Á⁄¿ ÁÔ¿ Ë¿ Ë'¿ ËE¿ ËI¿ ËJ¿ Ëj¿ Ëã¿ Ë¨¿ ËÌ¿ È¿ ÈI¿ ÈM¿ ÈN¿ Èp¿ Èë¿ È≤¿ È”¿ Í¿ Í;¿ Íi¿ Íj¿ Í¶¿ ÍŸ¿ Í⁄¿ Î
¿ Î¿ Î¿ Î/¿ ÎP¿ Îq¿ Îí¿ Î–¿ Î˛¿ Ï¿ Ï¿ ÏN¿ Ï{¿ Ï©¿ ÏΩ¿ Ï”¿ ÏÍ¿ Ïˇ¿ Ì"¿ ÌC¿ ÌJ¿ Ìá¿ Ì√¿ ÌÛ¿ Ó¿ ÓC¿ Óz¿ Óõ¿ Ó¥¿ ÓÀ¿ ÓË¿ Ô¿ Ô#¿ Ô^¿ Ôè¿ Ô∫¿ Ô÷¿ ÔÓ¿ Ô˜¿ ?¿ L¿ ~¿ í¿ ™¿ ≥¿ ˜¿ ˝¿ Ò¿ Ò¿ ÒC¿ Òs¿ Òµ¿ ÒÈ¿ Ú!¿ Úe¿ Úà¿ Ú´¿ Ú≥¿ Úπ¿ ÚÃ¿ Ú–¿ Ú—¿ Û¿ ÛL¿ Ûn¿ Ûr¿ Ûs¿ Ûƒ¿ Ù¿ ÙR¿ Ù¿ Ù∞¿ Ùﬁ¿ ı¿ ı@¿ ık¿ ıâ¿ ıç¿ ıé¿ ı∑¿ ı›¿ ˆ¿ ˆ(¿ ˆ=¿ ˆr¿ ˆ†¿ ˆß¿ ˆ´¿ ˆ¨¿ ˆ“¿ ˜¿ ˜¿ ˜¿ ˜O¿ ˜w¿ ˜ß¿ ˜º¿ ˜ƒ¿ ˜ ¿ ˜‹¿ ˜‡¿ ˜·¿ ¯¿ ¯/¿ ¯N¿ ¯k¿ ¯l¿ ¯ß¿ ¯≈¿ ¯Õ¿ ¯”¿ ¯◊¿ ¯ÿ¿ ˘ ¿ ˘W¿ ˘Ü¿ ˘±¿ ˘È¿ ˙¿ ˙1¿ ˙H¿ ˙]¿ ˙|¿ ˙µ¿ ˙‰¿ ˚¿ ˚¿ ˚8¿ ˚W¿ ˚l¿ ˚Å¿ ˚¡¿ ˚‰¿ ˚Ô¿ ˚¯¿ ˚ˇ¿ ¸!¿ ¸e¿ ¸i¿ ¸j¿ ¸é¿ ¸∂¿ ¸‘¿ ˝ ¿ ˝-¿ ˝<¿ ˝i¿ ˝q¿ ˝w¿ ˝{¿ ˝|¿ ˝®¿ ˝Õ¿ ˝ﬁ¿ ˝‰¿ ˛¿ ˛4¿ ˛5¿ ˛Y¿ ˛ç¿ ˛é¿ ˛ÿ¿ ˛˚¿ ˇ¿ ˇ>¿ ˇe¿ ˇm¿ ˇó¿ ˇù¿ ˇû¿ ˇ⁄¿ ˇ˚¿ ¿ ¿ ¿ W¿ o¿ ó¿ ¥¿ €¿ ¿%¿+¿,¿q¿r¿ü¿†¿™¿‹¿˛¿*¿K¿{¿Ø¿π¿»¿Ï¿¿&¿8¿z¿¬¿»¿…¿˙¿7¿v¿~¿Ñ¿Ö¿£¿∫¿“¿˙¿¿5¿>¿E¿I¿J¿å¿∂¿¬¿¿)¿M¿b¿j¿k¿è¿§¿¨¿≠¿›¿ﬁ¿$¿B¿x¿y¿õ¿µ¿”¿¯¿¿B¿O¿Z¿c¿≠¿Æ¿⁄¿	
¿	%¿	l¿	∂¿	«¿	Ì¿
¿
-¿
A¿
a¿
É¿
•¿
Æ¿
Ø¿
›¿¿¿1¿N¿m¿é¿Ω¿ﬂ¿¿¿%¿)¿*¿q¿¢¿—¿‰¿Ò¿¿¿)¿R¿è¿∆¿€¿¿U¿Ü¿†¿œ¿ ¿$¿Q¿R¿r¿î¿™¿≤¿≥¿’¿¯¿¿2¿:¿;¿a¿â¿Ø¿÷¿¿,¿]¿°¿¢¿«¿Ÿ¿Î¿˛¿¿¿	¿X¿á¿µ¿◊¿¿$¿(¿)¿n¿ò¿Ω¿Ò¿¿Y¿Ü¿≠¿Ω¿≈¿À¿Ô¿Û¿ı¿ˆ¿E¿í¿‚¿˘¿ ¿Y¿w¿x¿¬¿»¿¿¿X¿†¿Î¿¿¿a¿å¿ç¿ﬁ¿Ù¿˙¿,¿2¿Å¿û¿ü¿‚¿˝¿˛¿:¿X¿Z¿[¿¨¿¸¿¿/¿:¿E¿Z¿r¿Ñ¿î¿†¿Ø¿º¿æ¿ø¿¿F¿f¿™¿∞¿ˇ¿M¿ç¿ƒ¿≈¿¿c¿±¿€¿·¿,¿y¿»¿ ¿ ¿ #¿ $¿ p¿ ñ¿ ó¿  ¿ ¿!(¿!)¿!B¿!C¿!é¿!µ¿!ª¿!Ù¿"¿"¿"X¿"Y¿"ë¿"ø¿"¿¿"ˇ¿#=¿#>¿#¿#ü¿#‘¿#˙¿$¿$¿$¿$/¿$3¿$4¿$v¿$°¿$ª¿$“¿%¿%B¿%H¿%L¿%M¿%ì¿%¨¿%€¿&,¿&L¿&c¿&í¿&ñ¿&ó¿&‚¿'¿'5¿'Y¿'Ö¿'ã¿'®¿'ø¿'√¿'ƒ¿(¿(9¿(J¿(^¿(°¿(ß¿(º¿(»¿(Ã¿(Õ¿)¿)b¿)Ø¿)ı¿*.¿*M¿*{¿*§¿*™¿*Æ¿*Ø¿*˛¿+¿+P¿+c¿+°¿+¢¿+Ó¿,¿,"¿,p¿,Ä¿,¨¿,ÿ¿,Î¿-
¿-R¿-í¿-©¿-±¿-≤¿-œ¿-–¿. ¿.(¿.P¿.Z¿.b¿.c¿.à¿.∞¿.›¿.Á¿.Ô¿.¿/0¿/P¿/Ä¿/∏¿/¿¿/¡¿/ı¿0"¿0n¿0•¿0‰¿1¿16¿1Y¿1c¿1k¿1l¿1ë¿1Õ¿2¿2H¿2z¿2ô¿2Ø¿2ª¿2≈¿2Õ¿2Œ¿3¿3#¿3N¿3o¿3è¿3ó¿3ò¿3≈¿4¿4¿4¿4¿4P¿4v¿4w¿4ô¿4≤¿4∏¿4º¿4Ω¿5
¿5!¿5N¿5d¿5Å¿5á¿5”¿5◊¿5Ÿ¿5⁄¿5˘¿6$¿6%¿6[¿6¿6Ñ¿6Ö¿6©¿6™¿6Ã¿6Õ¿7¿7¿7,¿7k¿7Æ¿7Á¿7Î¿7Ï¿8$¿8H¿8L¿8N¿8O¿8}¿8Å¿8Œ¿9¿9`¿9ù¿9°¿9Ó¿:3¿:J¿:ñ¿:‡¿:˙¿;¿;¿;6¿;7¿;s¿;Ø¿;◊¿;ÿ¿<¿<[¿<á¿<à¿<•¿<Œ¿<œ¿<Ë¿=1¿=T¿=o¿=á¿=à¿=∫¿=‹¿=˘¿>¿>+¿>,¿>C¿>ä¿>≠¿> ¿>‚¿>‰¿>Â¿?2¿?6¿?r¿?ë¿?„¿@4¿@_¿@`¿@®¿@’¿@◊¿@ÿ¿@Ó¿A¿A!¿AD¿AJ¿As¿Aé¿A‹¿A˘¿BF¿Bï¿B≥¿BË¿C(¿C;¿CA¿CB¿Cw¿C®¿C≈¿C‡¿Cˇ¿D%¿DG¿Dk¿Dç¿D∂¿D¡¿D ¿D–¿D—¿Dı¿E¿E'¿EC¿E_¿E}¿E ¿EÚ¿E˘¿E˝¿E˛¿FD¿F|¿F≠¿F»¿FÍ¿G¿G2¿Gm¿Gè¿G´¿G∂¿Gø¿G≈¿G∆¿GÒ¿H¿H)¿HW¿Hu¿Hü¿H«¿HŒ¿H“¿H”¿I#¿II¿Iá¿IÕ¿I—¿I”¿I‘¿J¿J¿Je¿Jk¿Jä¿J£¿J§¿J‘¿K ¿K¿KF¿Ki¿Kj¿Kª¿L	¿LW¿Lä¿L¶¿Lß¿Lª¿L◊¿L˘¿M¿M4¿M:¿M<¿M=¿Ml¿M¿M°¿M’¿N¿N¿N*¿Nr¿N∂¿NË¿NÈ¿O#¿OK¿Og¿Ok¿Ol¿O¶¿OŒ¿Oˆ¿O¸¿P ¿P¿P¿P,¿PM¿Pí¿PΩ¿Pæ¿P‰¿Q¿Q¿Q¿QS¿Qc¿Qá¿Q±¿Q≤¿Q—¿Q“¿R	¿R
¿R.¿R/¿RP¿RQ¿Rf¿Rg¿Rì¿Rî¿R≈¿R∆¿S¿S^¿SÑ¿Só¿Sπ¿S‡¿S·¿T¿T5¿TR¿Tâ¿T“¿TÌ¿T˜¿Tˇ¿U ¿U0¿Ui¿Uâ¿Uœ¿Uﬁ¿V¿V¿V¿V¿VL¿Vx¿V°¿VÕ¿VÙ¿Vı¿W;¿Wà¿W√¿W”¿W€¿W·¿W‚¿X¿X+¿Xf¿Xv¿X~¿X£¿Xœ¿X’¿X÷¿X˘¿Y¿Y'¿YA¿YE¿YF¿Yv¿YÄ¿YΩ¿YÌ¿Z
¿Z+¿Za¿Z~¿Zä¿Z∞¿Z⁄¿Z‰¿ZÏ¿Zˇ¿[¿[¿[¿[:¿[R¿[l¿[ã¿[å¿[Ÿ¿\$¿\@¿\A¿\Ü¿\á¿\ì¿\≈¿\«¿\»¿\‹¿\Ò¿]¿]¿]5¿]6¿]B¿]X¿]Å¿]Ö¿]á¿]à¿]µ¿]∂¿^¿^3¿^]¿^á¿^à¿^ß¿^º¿_¿_¿_5¿_d¿_î¿_ï¿_“¿_”¿`"¿`r¿`≠¿`≥¿a ¿aJ¿aú¿aœ¿a‚¿b¿bJ¿bk¿bç¿bÿ¿bˇ¿c¿c¿c?¿ca¿cå¿c°¿c©¿c™¿c»¿c˜¿d4¿dm¿dé¿dñ¿d¥¿d∫¿dª¿d÷¿dË¿dÏ¿dÓ¿dÔ¿e:¿eâ¿eì¿eµ¿e€¿f¿f¿f%¿f:¿fÅ¿fÇ¿fò¿fπ¿f◊¿fÿ¿g¿g¿gB¿gC¿gí¿g‚¿h¿h#¿hp¿h∫¿i¿i?¿iR¿iÑ¿iü¿iø¿i≈¿i∆¿iÂ¿j¿j2¿jc¿jÄ¿jÜ¿já¿j≥¿jÍ¿k¿kW¿km¿ku¿k∞¿k·¿l
¿l¿l¿l¿lN¿lx¿lâ¿lç¿lè¿lê¿lµ¿l ¿lﬁ¿m¿mY¿mZ¿m{¿mì¿m≠¿mÃ¿m“¿m‘    AnalysisDriverAnalysisDriverGenericAnalysisDriverPriorityAnalysisDriverSchedulerAnalysisDriverTestViewAnalysisResultDriverWatcherErrorEncodingExceptionResult
OwnedFilesSchedulerWorker_DiscoverAvailableFilesTask_ExceptionState_FileChange_FileChangeKind!_FilesDefiningClassMemberNameTask_FilesReferencingNameTask_ResolveForCompletionRequest Ùä